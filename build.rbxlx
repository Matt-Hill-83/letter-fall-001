<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Workspace" referent="14">
		<Properties>
			<bool name="AllowThirdPartySales">false</bool>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="CollisionGroups">Default^0^1</string>
			<Ref name="CurrentCamera">RBX968dac0b02574a2ca094fb3d0b05d5ef</Ref>
			<double name="DistributedGameTime">0</double>
			<bool name="ExplicitAutoJoints">true</bool>
			<float name="FallenPartsDestroyHeight">-500</float>
			<bool name="FilteringEnabled">true</bool>
			<float name="Gravity">196.199997</float>
			<token name="InterpolationThrottling">0</token>
			<token name="LevelOfDetail">0</token>
			<token name="MeshPartHeads">0</token>
			<CoordinateFrame name="ModelInPrimary">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<CoordinateFrame name="ModelMeshCFrame">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
			<Vector3 name="ModelMeshSize">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
			</Vector3>
			<string name="Name">Workspace</string>
			<Ref name="PrimaryPart">null</Ref>
			<int64 name="SourceAssetId">-1</int64>
			<bool name="StreamingEnabled">false</bool>
			<int name="StreamingMinRadius">64</int>
			<token name="StreamingPauseMode">0</token>
			<int name="StreamingTargetRadius">1024</int>
			<BinaryString name="Tags"></BinaryString>
			<bool name="TerrainWeldsFixed">true</bool>
		</Properties>
		<Item class="Camera" referent="RBX968dac0b02574a2ca094fb3d0b05d5ef">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<CoordinateFrame name="CFrame">
					<X>-42.6553459</X>
					<Y>41.4771194</Y>
					<Z>113.332222</Z>
					<R00>0.935905695</R00>
					<R01>0.114143297</R01>
					<R02>-0.333244652</R02>
					<R10>7.45058149e-09</R10>
					<R11>0.946043491</R11>
					<R12>0.324039757</R12>
					<R20>0.352250934</R20>
					<R21>-0.303270668</R21>
					<R22>0.885407329</R22>
				</CoordinateFrame>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<float name="FieldOfView">70</float>
				<token name="FieldOfViewMode">0</token>
				<CoordinateFrame name="Focus">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="HeadLocked">true</bool>
				<float name="HeadScale">1</float>
				<string name="Name">Camera</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="Terrain" referent="RBXad5ea781ed814e6fb9339e65f3a6d83b">
			<Properties>
				<bool name="Anchored">true</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CastShadow">true</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<bool name="Decoration">false</bool>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<BinaryString name="MaterialColors"><![CDATA[AAAAAAAAan8/P39rf2Y/ilY+j35fi21PZmxvZbDqw8faiVpHOi4kHh4lZlw76JxKc3trhHta
gcLgc4RKxr21zq2UlJSM]]></BinaryString>
				<string name="Name">Terrain</string>
				<BinaryString name="PhysicsGrid">AgMAAAAAAAAAAAAAAAA=</BinaryString>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<BinaryString name="SmoothGrid">AQU=</BinaryString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<Color3 name="WaterColor">
					<R>0.0500000007</R>
					<G>0.330000013</G>
					<B>0.360000014</B>
				</Color3>
				<float name="WaterReflectance">1</float>
				<float name="WaterTransparency">0.300000012</float>
				<float name="WaterWaveSize">0.150000006</float>
				<float name="WaterWaveSpeed">10</float>
				<Vector3 name="size">
					<X>2044</X>
					<Y>252</Y>
					<Z>2044</Z>
				</Vector3>
			</Properties>
		</Item>
		<Item class="Folder" referent="RBX4c6a61b6d7e246e6bdd611dc390a7bc4">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">MyStuff</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="Folder" referent="RBXa313d2afa18944c38793a39f3ab19447">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">-- Demos</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="Folder" referent="RBXb65f67cb1c4c4157bafc7948f570be95">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">MyTemplates</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="Script" referent="RBXa84a614b19674fd6bbf4a22c86f51dac">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">StartUpScript</string>
					<string name="ScriptGuid">{b240a0d6-584a-4ab9-9877-08ec6e7459f1}</string>
					<ProtectedString name="Source"><![CDATA[print("Startup Script------------------------------------")

local remoteCode = require(game.ServerScriptService.Source.AddRemoteObjects.AddToBase)

remoteCode.addRemoteObjects()

]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="Part" referent="RBXca8d948084a54bafb8b7c84fcc18b790">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
						<R00>0</R00>
						<R01>0</R01>
						<R02>1</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>-1</R20>
						<R21>0</R21>
						<R22>0</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4290040548</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">TerrainBase</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>128</X>
						<Y>2</Y>
						<Z>128</Z>
					</Vector3>
				</Properties>
				<Item class="PointLight" referent="RBX2b81c17b39b14bf48eec007cdb3c39f4">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<float name="Brightness">1</float>
						<Color3 name="Color">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="Enabled">true</bool>
						<string name="Name">PointLight</string>
						<float name="Range">8</float>
						<bool name="Shadows">false</bool>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="Folder" referent="RBXff708d0c7fc54495adda1da0b2edc54d">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">TestLabZZZ</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
	</Item>
	<Item class="SoundService" referent="RBX7845308c7ca3451eaa9eca1a685d0279">
		<Properties>
			<token name="AmbientReverb">0</token>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<float name="DistanceFactor">3.32999992</float>
			<float name="DopplerScale">1</float>
			<string name="Name">SoundService</string>
			<bool name="RespectFilteringEnabled">false</bool>
			<float name="RolloffScale">1</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="NonReplicatedCSGDictionaryService" referent="RBX4e70e2d9e1444c98960b869adb2c7f0f">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">NonReplicatedCSGDictionaryService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="CSGDictionaryService" referent="RBX266db11a4dcd47c39103bc86cfeba4b3">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CSGDictionaryService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="Chat" referent="RBXbc4075149fb048fa9f9ebd8f12e22fb6">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="BubbleChatEnabled">false</bool>
			<bool name="LoadDefaultChat">true</bool>
			<string name="Name">Chat</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="TimerService" referent="RBX2ad66b79fdf34e33a057926fc0fbbd75">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="Players" referent="RBXc6ef5d2dd2eb44f98d969dab3076cc35">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="CharacterAutoLoads">true</bool>
			<int name="MaxPlayersInternal">12</int>
			<string name="Name">Players</string>
			<int name="PreferredPlayersInternal">0</int>
			<float name="RespawnTime">5</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="ReplicatedFirst" referent="RBX6f9e3d9578c34a3da11f7cf8b7fae642">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ReplicatedFirst</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="ModuleScript" referent="RBX4a89f88b80f74a93a501240afa2f2d5e">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Source</string>
				<string name="ScriptGuid">{d0444d99-a244-4922-882b-7f15790100c2}</string>
				<ProtectedString name="Source"><![CDATA[---test
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXb79bc08c18724e8294df0222ce96169a">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">-- Demos</string>
					<string name="ScriptGuid">{086dacff-987b-4a90-a578-737e9609594e}</string>
					<ProtectedString name="Source"></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX234ff128ed5b4c41bf5b95da0d2a75fd">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">bs</string>
						<string name="ScriptGuid">{9db894e5-b89e-4df2-ad4a-8ea5d5ed20cc}</string>
						<ProtectedString name="Source">--- test</ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
	</Item>
	<Item class="TweenService" referent="RBXdcb8438f56d04ada9b938f69f6c52e0a">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">TweenService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="PlayerEmulatorService" referent="RBX9dfc5e24eed34adab93223fb7d1a5bac">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="EmulatedCountryCode"></string>
			<string name="EmulatedGameLocale"></string>
			<string name="Name">PlayerEmulatorService</string>
			<bool name="PlayerEmulationEnabled">false</bool>
			<string name="SerializedEmulatedPolicyInfo"></string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="PermissionsService" referent="RBX0d7dd1ef969f444e9dd1653acc4c64b8">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">PermissionsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="StudioData" referent="RBX1a2c9f23aca84b06b5265f5535ec9a58">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<int64 name="CommitInflightAuthorId">0</int64>
			<string name="CommitInflightGuid"></string>
			<int name="CommitInflightPlaceVersion">0</int>
			<bool name="EnableScriptCollabByDefaultOnLoad">false</bool>
			<bool name="EnableScriptCollabOnLoad">false</bool>
			<string name="Name">StudioData</string>
			<int64 name="SourceAssetId">-1</int64>
			<int64 name="SrcPlaceId">6060287119</int64>
			<int64 name="SrcUniverseId">2197038649</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="StarterPlayer" referent="RBXb16d3b433aa84262921638d127ab57ee">
		<Properties>
			<bool name="AllowCustomAnimations">true</bool>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="AutoJumpEnabled">true</bool>
			<float name="CameraMaxZoomDistance">400</float>
			<float name="CameraMinZoomDistance">0.5</float>
			<token name="CameraMode">0</token>
			<float name="CharacterJumpHeight">7.19999981</float>
			<float name="CharacterJumpPower">50</float>
			<float name="CharacterMaxSlopeAngle">89</float>
			<bool name="CharacterUseJumpPower">true</bool>
			<float name="CharacterWalkSpeed">16</float>
			<token name="DevCameraOcclusionMode">0</token>
			<token name="DevComputerCameraMovementMode">0</token>
			<token name="DevComputerMovementMode">0</token>
			<token name="DevTouchCameraMovementMode">0</token>
			<token name="DevTouchMovementMode">0</token>
			<bool name="EnableMouseLockOption">true</bool>
			<int64 name="GameSettingsAssetIDFace">0</int64>
			<int64 name="GameSettingsAssetIDHead">0</int64>
			<int64 name="GameSettingsAssetIDLeftArm">0</int64>
			<int64 name="GameSettingsAssetIDLeftLeg">0</int64>
			<int64 name="GameSettingsAssetIDPants">0</int64>
			<int64 name="GameSettingsAssetIDRightArm">0</int64>
			<int64 name="GameSettingsAssetIDRightLeg">0</int64>
			<int64 name="GameSettingsAssetIDShirt">0</int64>
			<int64 name="GameSettingsAssetIDTeeShirt">0</int64>
			<int64 name="GameSettingsAssetIDTorso">0</int64>
			<token name="GameSettingsAvatar">1</token>
			<token name="GameSettingsR15Collision">0</token>
			<NumberRange name="GameSettingsScaleRangeBodyType">0 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeHead">0.95 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeHeight">0.9 1.05 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeProportion">0 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeWidth">0.7 1 </NumberRange>
			<float name="HealthDisplayDistance">100</float>
			<bool name="LoadCharacterAppearance">true</bool>
			<string name="Name">StarterPlayer</string>
			<float name="NameDisplayDistance">100</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<bool name="UserEmotesEnabled">true</bool>
		</Properties>
		<Item class="StarterPlayerScripts" referent="RBX3bd836e4edf24b76b728f8133aad4365">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">StarterPlayerScripts</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="LocalScript" referent="RBXfdd8c563078d4ad99e0ddc4f2415a1b1">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">FreezeCamera</string>
					<string name="ScriptGuid">{7b248aab-e582-4228-994a-24372ce22d28}</string>
					<ProtectedString name="Source"><![CDATA[print("Freeze Camera - local script")

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local remoteEvent = ReplicatedStorage:WaitForChild("FreezeCameraRE")

local StarterPlayer = game:GetService("StarterPlayer")
local Texts = require(StarterPlayer.Source.Texts)

local function onNotifyPlayer(cameraPath1, cameraPath2, freeze)

	local player = game:GetService("Players").LocalPlayer
	local playerGui = player.PlayerGui.SceneDialogGui
	
	local camera = workspace.CurrentCamera
	if freeze then
		playerGui.Enabled = true
		local cameraOffset = Vector3.new(0, 0, 2)

		if camera.CameraType ~= Enum.CameraType.Scriptable then
			camera.CameraType = Enum.CameraType.Scriptable
		end

		camera.CFrame = CFrame.new(cameraPath1.Position + cameraOffset,
			cameraPath2.Position)
	else
		playerGui.Enabled = false
		camera.CameraType = Enum.CameraType.Custom
		
	end
end

remoteEvent.OnClientEvent:Connect(onNotifyPlayer)
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="LocalScript" referent="RBX62826348d86243dbb011113b38acd99d">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">RenderDialog</string>
					<string name="ScriptGuid">{43facf73-d8a2-4dc9-9bd7-1072559272dd}</string>
					<ProtectedString name="Source"><![CDATA[print("RenderDialog - local script")

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local remoteEvent = ReplicatedStorage:WaitForChild("RenderDialogRE")

local StarterPlayer = game:GetService("StarterPlayer")
local Texts = require(StarterPlayer.Source.Texts)

local function onNotifyPlayer(dialogs)
	print("RenderDialog - local event")

	local player = game:GetService("Players").LocalPlayer
	local playerGui = player.PlayerGui.SceneDialogGui

	Texts.renderTexts({
		dialogConfigs = dialogs,
		sgui = playerGui,
	})
end

remoteEvent.OnClientEvent:Connect(onNotifyPlayer)
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="StarterCharacterScripts" referent="RBX9d1385455bc54ea4a381848f0c02cb4d">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">StarterCharacterScripts</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="BoolValue" referent="RBX364da72c8bb54b94937fd01a58f71363">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">currentlyTeleporting</string>
					<int64 name="SourceAssetId">4778278500</int64>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Value">false</bool>
				</Properties>
			</Item>
			<Item class="LocalScript" referent="RBXf97b741373bf4b5f8dd3e97f7dd6da16">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">LocalScript</string>
					<string name="ScriptGuid">{08eb1132-1b9c-457f-b127-100d2224d4c6}</string>
					<ProtectedString name="Source"><![CDATA[print("----- Starter Character Script -----")





-------------------------
-------------------------
-------------------------
--local character = script.Parent
--local humanoid = character:WaitForChild("Humanoid")

--function onSeated(isSeated, seat)
--	if isSeated then
--		print("I'm now sitting on: " .. seat.Name .. "!")
--	else
--		print("I'm not sitting on anything")
--	end
--end
--humanoid.Seated:Connect(onSeated)]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBXa4ef5e853f9f4c91b47d6dbcc2aa7d3b">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Source</string>
				<string name="ScriptGuid">{8979da9f-bdff-4f14-babc-763db913fa5f}</string>
				<ProtectedString name="Source"><![CDATA[---test
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX30cdce8a600c4477b18a74de90913003">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">StarterPlayerScripts</string>
					<string name="ScriptGuid">{c2c76472-e814-4bdb-945d-75e23a4814cb}</string>
					<ProtectedString name="Source"><![CDATA[---test
-- zzzzz
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX587aba4bb4374a9caad26e19fde5e8be">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">RSUtils</string>
						<string name="ScriptGuid">{4d5bd6e3-46d2-477d-9809-73faaf518b25}</string>
						<ProtectedString name="Source"><![CDATA[local StarterPlayer = game:GetService("StarterPlayer")
local Constants = require(StarterPlayer.Source.StarterPlayerScripts.RSConstants)
local module = {}
local collectionService = game:GetService("CollectionService")
-- 
-- 

function module.setPropsByTag(props)
    local tag = props.tag
    local theProps = props.props

    local items = collectionService:GetTagged(tag)

    for i, item in ipairs(items) do
        mergeTables(item, theProps)
        -- 
    end

end

function getFirstDescendantByName(parent, name)
    local model = parent:GetDescendants()
    for i = 1, #model do
        if model[i].Name == name then
            return model[i]
            -- 
        end
    end
end

function getDescendantsByName(parent, name)
    local items = parent:GetDescendants()

    local output = {}
    for i, item in ipairs(items) do
        if item.Name == name then
            table.insert(output, item)
            -- 
        end
    end
    return output
end

function module.getDescendantsByType(parent, type)
    local items = parent:GetDescendants()
    local output = {}

    for i, item in pairs(items) do
        if item:IsA(type) then
            table.insert(output, item)
            -- 
        end
    end
    return output
end

-- 
-- 

function hideItem(part, hide)
    local transparency = hide and 1 or 0
    local visible = not hide
    local enabled = not hide

    if part:IsA("BasePart") then part.Transparency = transparency end
    if part:IsA("Decal") then part.Transparency = transparency end

    if part:IsA("ScrollingFrame") then part.Visible = visible end
    if part:IsA("TextLabel") then part.Visible = visible end
    if part:IsA("TextButton") then part.Visible = visible end

    if part:IsA("SurfaceGui") then part.Enabled = enabled end
end

function setChildrenProps(parent, props)
    if parent:IsA("BasePart") then mergeTables(parent, props) end

    local children = parent:GetDescendants()
    for i, item in ipairs(children) do
        if item:IsA("BasePart") then mergeTables(item, props) end
    end
end

function hideItemAndChildren(props)
    local parent = props.item
    local hide = props.hide

    hideItem(parent, hide)
    local children = parent:GetDescendants()
    for i, item in ipairs(children) do hideItem(item, hide) end
end

function sizeWalls(props)
    local parent = props.item
    local height = props.height

    local children = parent:GetDescendants()
    for i, item in ipairs(children) do
        if item:isA("Part") then item.CanCollide = false end
    end
    for i, item in ipairs(children) do
        if item:isA("Part") then
            local posY = item.Position.Y - item.Size.Y / 2
            local newPosY = posY + (height / 2)
            item.Size = Vector3.new(item.Size.X, height, item.Size.Z)
            item.Position = Vector3.new(item.Position.X, newPosY,
                                        item.Position.Z)

        end
    end
    for i, item in ipairs(children) do
        if item:isA("Part") then

            item.CanCollide = true
            item.Anchored = true
        end
    end
end

function sizeWalls2(props)
    local items = props.items
    local height = props.height

    -- local children = parent:GetDescendants()
    for i, item in ipairs(items) do
        if item:isA("Part") then item.CanCollide = false end
    end
    for i, item in ipairs(items) do
        if item:isA("Part") then
            local posY = item.Position.Y - item.Size.Y / 2
            local newPosY = posY + (height / 2)
            item.Size = Vector3.new(item.Size.X, height, item.Size.Z)
            item.Position = Vector3.new(item.Position.X, newPosY,
                                        item.Position.Z)

        end
    end
    for i, item in ipairs(items) do
        if item:isA("Part") then

            item.CanCollide = true
            item.Anchored = true
        end
    end
end

function module.hideItemAndChildrenByName(props)
    local name = props.name
    local hide = props.hide

    local myStuff = workspace:FindFirstChild("MyStuff")
    local item = getFirstDescendantByName(myStuff, name)
    hideItemAndChildren({item = item, hide = hide})
end

function module.setWallHeightByList(props)
    local items = props.items
    local height = props.height

    sizeWalls2({items = items, height = height})

end

function module.setWallHeightbyParentModelName(props)
    local name = props.name
    local height = props.height

    local myStuff = workspace:FindFirstChild("MyStuff")
    -- local item = getFirstDescendantByName(myStuff, name)
    local items = getDescendantsByName(myStuff, name)

    for i, item in ipairs(items) do
        sizeWalls({item = item, height = height})
        -- 
    end
end

function module.setItemAndChildrenPropsByName(myProps)
    local name = myProps.name
    local props = myProps.props

    local myStuff = workspace:FindFirstChild("MyStuff")
    local item = getFirstDescendantByName(myStuff, name)
    setChildrenProps(item, props)
end

function module.setItemAndChildrenPropsByInst(myProps)
    local item = myProps.item
    local props = myProps.props

    setChildrenProps(item, props)
end

function module.getOrCreateFolder(props)
    local name = props.name
    local parent = props.parent

    local runtimeQuestsFolder = getFirstDescendantByName(parent, name)

    if not runtimeQuestsFolder then
        runtimeQuestsFolder = Instance.new("Folder", parent)
        runtimeQuestsFolder.Name = name
        runtimeQuestsFolder = getFirstDescendantByName(parent, name)
    end

    return runtimeQuestsFolder
end

function module.reportPlayerLocation()
    local Players = game:GetService("Players")
    Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function(character)
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            while humanoidRootPart do
                local test2 = workspace.CurrentCamera.CFrame.Position
                print(test2);
                print(player.Name, "is at", tostring(humanoidRootPart.Position))
                wait(4)
            end
        end)
    end)
end

function module.getDecalIdFromName(props)
    local name = props.name
    if (Constants.characters[name] and Constants.characters[name]["decalId"]) then
        return Constants.characters[name]["decalId"]
    else

        if (name ~= "blank" and name ~= "empty" and name ~= "") then
            print("----------------- decalId not found: ------------" .. name)
        end
        return '5999465084'
    end
end

function module.getDisplayNameFromName(props)
    local name = props.name
    if (Constants.characters[name] and Constants.characters[name]["displayName"]) then
        return Constants.characters[name]["displayName"]
    else
        print("---------------------- name not found: ------------" .. name)
        return name
    end
end

function module.deleteChildrenByName(props)
    local parent = props.parent
    local childName = props.childName
    local children = parent:GetDescendants()
    for i, item in pairs(children) do
        if item.Name == childName then
            item:Destroy()
            --
        end
    end
end

function getFromMyStuff(name)
    local myStuff = workspace:FindFirstChild("MyStuff")
    return getFirstDescendantByName(myStuff, name)
end

function module.getFromTemplates(name)
    local myStuff = workspace:FindFirstChild("MyStuff")
    local myTemplates = myStuff:FindFirstChild("MyTemplates")
    return getFirstDescendantByName(myTemplates, name)
end

function module.unAttachAllChildParts(parent)
    local items = parent:GetDescendants()
    local output = {}
    for i = 1, #items do
        if items[i]:IsA('Part') then
            local item = items[i]
            if item.Anchored == true then table.insert(output, item) end
            --
        end

    end
    return output
end

function module.getDescendantsByNameMatch(parent, name)
    local descendants = parent:GetDescendants()
    local output = {}
    for i = 1, #descendants do
        local child = descendants[i]
        local match = string.match(child.Name, name)
        if match then
            table.insert(output, child)
            -- 
        end
    end
    return output
end

function addcfv3(a, b)
    local x, y, z, m11, m12, m13, m21, m22, m23, m31, m32, m33 = a:components()
    return CFrame.new(x + b.x, y + b.y, z + b.z, m11, m12, m13, m21, m22, m23,
                      m31, m32, m33);
end

function cloneModel(props)
    local model = props.model
    local position = props.position
    local suffix = props.suffix

    local modelClone = model:Clone()
    modelClone.Parent = model.Parent
    modelClone.Name = model.Name .. (suffix or "-Clone")
    if (position) then
        modelClone:SetPrimaryPartCFrame(position)
        -- 
    end
    return modelClone
end

local function getNames(tab, name, res, lev)
    res = res or {[tab] = "ROOT"}
    local pls = {}
    lev = lev or 0
    for k, v in pairs(tab) do
        if type(v) == "table" and not res[v] then
            local n = name .. "." .. tostring(k)
            res[v] = n
            pls[v] = n
        end
    end
    for k, v in pairs(pls) do
        getNames(k, v, res)
        pls[k] = lev
    end
    return res, pls
end

function tableToString(tab, a, b, c, d)
    a, b = a or 0, b or {[tab] = true}
    local name = b[tab]
    local white = ("\t"):rep(a + 1)
    if not c then c, d = getNames(tab, "ROOT") end
    local res = {"{"}
    for k, v in pairs(tab) do
        local value
        if type(v) == "table" then
            if d[v] == a and not b[v] then
                b[v] = true
                value = tableToString(v, a + 1, b, c, d)
            else
                value = c[v]
            end
        elseif type(v) == "string" then
            value = '"' .. v:gsub("\n", "\\n"):gsub("\t", "\\t") .. '"'
        else
            value = tostring(v)
        end
        table.insert(res, white .. tostring(k) .. " = " .. value)
    end
    white = white:sub(2)
    table.insert(res, white .. "}")
    return table.concat(res, "\n")
end

local test = {
    str = "Result:\n\t- Unknown",
    number = 12345,
    child = {a = "b"},
    cyclic = {}
}
test.child.cyclic = test.cyclic
test.another = test.child

function mergeTables(t1, t2) for k, v in pairs(t2) do t1[k] = v end end

addPadding = function(props)
    local parent = props.parent
    local paddingPct = props.paddingPct

    local UIPadding = Instance.new("UIPadding", parent)

    UIPadding.PaddingBottom = UDim.new(paddingPct, 0)
    UIPadding.PaddingTop = UDim.new(paddingPct, 0)
    UIPadding.PaddingLeft = UDim.new(paddingPct, 0)
    UIPadding.PaddingRight = UDim.new(paddingPct, 0)
end

setMaterialPebble = function(part)
    part.Material = Enum.Material.Pebble
    part.BrickColor = BrickColor.new("Institutional white")
end

module.addcfv3 = addcfv3
module.addPadding = addPadding
module.cloneModel = cloneModel
module.getFirstDescendantByName = getFirstDescendantByName
module.getFromMyStuff = getFromMyStuff
module.setMaterialPebble = setMaterialPebble
module.tableToString = tableToString
module.hideItemAndChildren = hideItemAndChildren
module.mergeTables = mergeTables
module.getDescendantsByName = getDescendantsByName
return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXbf99fd5964a54e8fa8d6a465c176a11b">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">RSConstants</string>
						<string name="ScriptGuid">{19dadd8f-eaa5-409d-ba01-3fe4cc9b7610}</string>
						<ProtectedString name="Source"><![CDATA[local module = {
    buffer = 0,
    -- singleScene = true,
    singleScene = false,
    -- 
    entered = {value = false},
    baseWallHeight = 16,
    walkSpeed = 16,
    questWallHeight = 24,
    sceneHeight = 50
    -- 
}

module.dialogColors = {
    Color3.fromRGB(253, 158, 240), Color3.fromRGB(225, 253, 158),
    Color3.fromRGB(253, 228, 158), Color3.fromRGB(158, 253, 179),
    Color3.fromRGB(158, 215, 253)
}

local islandLength = 36
-- local bridgeLength = 31.1
-- local bridgeLength = 34
local bridgeBaseLength = 30
-- local bridgeBaseLength = 96
local bridgeOverlap = 2
local bridgeLength = bridgeBaseLength - 2 * bridgeOverlap

module.islandLength = islandLength
module.bridgeLength = bridgeLength
module.totalIslandLength = islandLength + bridgeLength

module.buttonLabels = {PrevPage = "Prev Page", NextPage = "Next Page"}

local raven = {
    displayName = "Raven",
    decalId = '5897424121',
    backgroundColorIdx = 1
}
local britta = {
    displayName = "Britta",
    decalId = '5897433108',
    backgroundColorIdx = 2
}

local mitzy02 = {
    displayName = "Mitzy Meow",
    decalId = '5976876671',
    backgroundColorIdx = 2
}

local vulcan = {
    displayName = "Vulcan",
    decalId = '5999464799',
    backgroundColorIdx = 1
}

module.characters = {

    raven05 = raven,
    raven04 = raven,
    raven = raven,
    britta = britta,
    britta01 = britta,
    britta04 = britta,

    fancyDudeFromFrance01 = {
        displayName = "fancyDudeFromFrance01",
        decalId = '5991276655',
        backgroundColorIdx = 1
    },
    goat01 = {
        displayName = "Goat",
        decalId = '6063417478',
        backgroundColorIdx = 1
    },
    robby01 = {
        displayName = "Robby",
        decalId = '5991273473',
        backgroundColorIdx = 1
    },
    waterfall = {
        displayName = "Waterfall",
        decalId = '5991339525',
        backgroundColorIdx = 1
    },
    cave = {
        displayName = "Cave",
        decalId = '5991342911',
        backgroundColorIdx = 1
    },
    hill = {
        displayName = "Hill",
        decalId = '5991342052',
        backgroundColorIdx = 1
    },
    lake = {
        displayName = "Lake",
        decalId = '5991341377',
        backgroundColorIdx = 1
    },
    log = {displayName = "Log", decalId = '5991341326', backgroundColorIdx = 1},
    pond = {
        displayName = "Pond",
        decalId = '5991340703',
        backgroundColorIdx = 1
    },
    pool = {
        displayName = "Pool",
        decalId = '5991340615',
        backgroundColorIdx = 1
    },
    swamp = {
        displayName = "Swamp",
        decalId = '5991343667',
        backgroundColorIdx = 1
    },
    bees = {
        displayName = "Bees",
        decalId = '5991343806',
        backgroundColorIdx = 1
    },
    cap = {displayName = "Cap", decalId = '5991343197', backgroundColorIdx = 1},
    castle = {
        displayName = "Castle",
        decalId = '5991343060',
        backgroundColorIdx = 1
    },
    chick01 = {
        displayName = "Chick",
        decalId = '6060376973',
        backgroundColorIdx = 1
    },
    coop = {
        displayName = "Coop",
        decalId = '5991342867',
        backgroundColorIdx = 1
    },
    cow01 = {
        displayName = "Cow",
        decalId = '6060376567',
        backgroundColorIdx = 1
    },
    girl09 = {
        displayName = "Girl",
        decalId = '5991275978',
        backgroundColorIdx = 1
    },
    lucky = {
        displayName = "Lucky",
        decalId = '5977954909',
        backgroundColorIdx = 3
    },
    lucky01 = {
        displayName = "Lucky",
        decalId = '5977954909',
        backgroundColorIdx = 3
    },
    mat = {displayName = "Mat", decalId = '5991341059', backgroundColorIdx = 1},
    mop = {displayName = "Mop", decalId = '5991340991', backgroundColorIdx = 1},
    pan = {displayName = "Pan", decalId = '5991340855', backgroundColorIdx = 1},
    slide = {
        displayName = "Slide",
        decalId = '5991340411',
        backgroundColorIdx = 1
    },
    swing = {
        displayName = "Swing",
        decalId = '5991340158',
        backgroundColorIdx = 1
    },

    stump = {
        displayName = "Stump",
        decalId = '5991340320',
        backgroundColorIdx = 1
    },
    bog = {displayName = "Bog", decalId = '5991343667', backgroundColorIdx = 1},
    home = {
        displayName = "Home",
        decalId = '5991341898',
        backgroundColorIdx = 1
    },
    bee = {displayName = "Bee", decalId = '5999465084', backgroundColorIdx = 1},
    elf = {displayName = "Elf", decalId = '5991266909', backgroundColorIdx = 4},
    bun = {displayName = "Bun", decalId = '5991343501', backgroundColorIdx = 1},
    dog01 = {
        displayName = "Dog",
        decalId = '5999464941',
        backgroundColorIdx = 1
    },
    dennisTheMenace = {
        displayName = "Dennis the Menace",
        decalId = '5999464873',
        backgroundColorIdx = 1
    },
    katieKooper01 = {
        displayName = "Katie Kooper",
        decalId = '5991267836',
        backgroundColorIdx = 1
    },
    troll01 = {
        displayName = "Troll01",
        decalId = '5999464489',
        backgroundColorIdx = 1
    },
    troll02 = {
        displayName = "Troll02",
        decalId = '5999464489',
        backgroundColorIdx = 3
    },
    rori = {
        displayName = "Rori",
        decalId = '5991267444',
        backgroundColorIdx = 4
    },
    vulcan = vulcan,
    vulcan01 = vulcan,

    -- 
    -- 
    -- 
    luke01 = {
        displayName = "Luke",
        decalId = '5998961085',
        backgroundColorIdx = 2
    },
    hudson01 = {
        displayName = "Hudson",
        decalId = '5998961874',
        backgroundColorIdx = 4
    },
    trollKing01 = {
        displayName = "Troll King",
        decalId = '5897428591',
        backgroundColorIdx = 3
    },
    trollKing = {
        displayName = "Troll King",
        decalId = '5897428591',
        backgroundColorIdx = 3
    },
    freckle = {
        displayName = "Freckle",
        decalId = '5897430768',
        backgroundColorIdx = 3
    },
    missyMeow01 = {
        displayName = "Missy Meow",
        decalId = '5898504226',
        backgroundColorIdx = 1
    },
    mitzyMeow01 = mitzy02,
    mitzy02 = mitzy02,
    kat = {displayName = "Kat", decalId = '5977951764', backgroundColorIdx = 3},
    liz2 = {displayName = "Liz", decalId = '5981806423', backgroundColorIdx = 2}
}

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX4e743f0db40e4f16ae5375368445fe28">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Texts</string>
					<string name="ScriptGuid">{fe5f4de7-a74d-4790-b335-8630061c4a7e}</string>
					<ProtectedString name="Source"><![CDATA[local TextService = game:GetService("TextService")
local StarterPlayer = game:GetService("StarterPlayer")
local Utils = require(StarterPlayer.Source.StarterPlayerScripts.RSUtils)
local Constants = require(StarterPlayer.Source.StarterPlayerScripts.RSConstants)

local dialogColors = Constants.dialogColors

local module = {}

renderTexts = function(props)
    local dialogConfigs = props.dialogConfigs
    local sgui = props.sgui

    local viewPortSize = sgui.AbsoluteSize

    local rowGap = 10
    local paddingInPx = 5
    local fontHeight = viewPortSize.Y / 30
    fontHeight = math.floor(fontHeight)

    local scrollingFrame =
        Utils.getFirstDescendantByName(sgui, "DialogScroller")
    local dialogScrollerPadding = Utils.getFirstDescendantByName(scrollingFrame,
                                                                 "DialogScrollerPadding")

    local scrollBarThickness = 2 * fontHeight
    scrollingFrame.ScrollBarThickness = scrollBarThickness

    local padding = fontHeight / 2
    dialogScrollerPadding.PaddingBottom = UDim.new(0, padding)
    dialogScrollerPadding.PaddingTop = UDim.new(0, padding)
    dialogScrollerPadding.PaddingLeft = UDim.new(0, padding)
    dialogScrollerPadding.PaddingRight =
        UDim.new(0, scrollBarThickness + fontHeight)

    local children = scrollingFrame:GetChildren()
    for i, item in pairs(children) do
        if item:IsA('TextLabel') then item:Destroy() end
    end

    local parentWidth = viewPortSize.X * 0.4 - (2 * paddingInPx)
    -- parentHeight is only used for the initial calc to determine the box size
    local parentHeight = viewPortSize.Y / 2

    local dialogY = 0
    for i, dialog in ipairs(dialogConfigs) do
        local line = dialogConfigs[i]

        local charName = line['char']
        local dialogText = dialog['text']

        local backgroundColor = dialogColors[4]
        local charConfig = Constants.characters[charName]
        local displayName = Utils.getDisplayNameFromName({name = charName})

        if charConfig then
            backgroundColor = dialogColors[charConfig.backgroundColorIdx]
        end

        if (dialogText ~= "blank") then
            local text = "<b>" .. displayName .. ": " .. "</b>" .. dialogText

            local font = Enum.Font.Arial
            local innerLabelWidth = parentWidth - (2 * paddingInPx) -
                                        scrollBarThickness

            local calcSize = TextService:GetTextSize(text, fontHeight, font,
                                                     Vector2.new(
                                                         innerLabelWidth,
                                                         parentHeight))

            local height = calcSize.Y

            local outerLabel = Instance.new("TextLabel", scrollingFrame)
            local outerLabelProps = {
                Name = "Dialog-" .. i,
                Position = UDim2.new(0, 0, 0, dialogY),
                Size = UDim2.new(1, 0, 0, height + 2 * paddingInPx),

                Text = "",
                Font = font,
                TextSize = fontHeight,
                TextWrapped = true,
                -- TextScaled = true,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Top,
                BorderColor3 = Color3.fromRGB(99, 46, 99),
                BorderSizePixel = 2,
                BackgroundColor3 = backgroundColor,
                TextColor3 = Color3.new(0, 0, 0),
                ZIndex = 1
            }
            Utils.mergeTables(outerLabel, outerLabelProps)

            local innerLabel = outerLabel:Clone()
            local innerLabelProps = {
                Parent = outerLabel,
                Name = "Dialog-" .. i,
                Text = text,
                ZIndex = 2,
                Size = UDim2.new(1, 0, 0, height),
                Position = UDim2.new(0, paddingInPx, 0, paddingInPx),
                BackgroundTransparency = 1,
                RichText = true
            }
            Utils.mergeTables(innerLabel, innerLabelProps)

            local absoluteHeight = outerLabel.AbsoluteSize.Y
            dialogY = dialogY + (absoluteHeight + rowGap)

        end
    end

end

module.renderTexts = renderTexts
return module
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
	</Item>
	<Item class="StarterPack" referent="RBXc28fbdcc6b6f4a7eb2b0d4c399a4e94b">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">StarterPack</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="ModuleScript" referent="RBX425ba6ddd2cb447d93d7b86818585b83">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Source</string>
				<string name="ScriptGuid">{5c07ace6-6b96-43f7-84a5-46b8c6be043c}</string>
				<ProtectedString name="Source"><![CDATA[---test
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
	</Item>
	<Item class="StarterGui" referent="RBXfad8e8a50fb044e28e00a92ffb65f759">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">StarterGui</string>
			<bool name="ResetPlayerGuiOnSpawn">true</bool>
			<token name="ScreenOrientation">2</token>
			<bool name="ShowDevelopmentGui">false</bool>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="ModuleScript" referent="RBX6fec74ab232e41c3a4b6034a8f93e171">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Source</string>
				<string name="ScriptGuid">{f5734f3d-1fd0-4367-8e0f-fba4bd9dac06}</string>
				<ProtectedString name="Source"><![CDATA[---test
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX8e12e06f525e4dcea917d1da29866757">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">-- Demos</string>
					<string name="ScriptGuid">{e694e16f-14b7-4226-bfe9-6e6bdea0ca55}</string>
					<ProtectedString name="Source"></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBXc2d77ff02dff44f89a11fee59fda71c8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">bs</string>
						<string name="ScriptGuid">{ef2e4678-d8fe-4912-acba-a428aefc786c}</string>
						<ProtectedString name="Source">--- test</ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="ScreenGui" referent="RBX58b0b1804988472792bda010ceadfcad">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<int name="DisplayOrder">0</int>
				<bool name="Enabled">false</bool>
				<bool name="IgnoreGuiInset">false</bool>
				<string name="Name">SceneDialogGui</string>
				<bool name="ResetOnSpawn">true</bool>
				<Ref name="RootLocalizationTable">null</Ref>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<token name="ZIndexBehavior">0</token>
			</Properties>
			<Item class="ScrollingFrame" referent="RBX6e7cf28a46894e0299c561e458d4c96a">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticCanvasSize">0</token>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.976470649</R>
						<G>0.933333397</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">0</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">2</token>
					<int name="BorderSizePixel">3</int>
					<Content name="BottomImage"><url>rbxasset://textures/ui/Scroll/scroll-bottom.png</url></Content>
					<Vector2 name="CanvasPosition">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<UDim2 name="CanvasSize">
						<XS>0</XS>
						<XO>0</XO>
						<YS>2</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="ClipsDescendants">true</bool>
					<bool name="Draggable">false</bool>
					<token name="ElasticBehavior">0</token>
					<token name="HorizontalScrollBarInset">0</token>
					<int name="LayoutOrder">0</int>
					<Content name="MidImage"><url>rbxasset://textures/ui/Scroll/scroll-middle.png</url></Content>
					<string name="Name">DialogScroller</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<Color3 name="ScrollBarImageColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="ScrollBarImageTransparency">0</float>
					<int name="ScrollBarThickness">40</int>
					<token name="ScrollingDirection">4</token>
					<bool name="ScrollingEnabled">true</bool>
					<bool name="Selectable">true</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0.495749861</XS>
						<XO>0</XO>
						<YS>0.500822365</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<Content name="TopImage"><url>rbxasset://textures/ui/Scroll/scroll-top.png</url></Content>
					<token name="VerticalScrollBarInset">0</token>
					<token name="VerticalScrollBarPosition">0</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="TextLabel" referent="RBXe5582e855a5c4564857289e8eeba3b8a">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.882352948</R>
							<G>0.992156863</G>
							<B>0.619607866</B>
						</Color3>
						<float name="BackgroundTransparency">0</float>
						<Color3 name="BorderColor3">
							<R>0.388235301</R>
							<G>0.180392161</G>
							<B>0.388235301</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">2</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">1</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<string name="Name">Dialog-1</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>798</XO>
							<YS>0</YS>
							<YO>52</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text"></string>
						<Color3 name="TextColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<bool name="TextScaled">true</bool>
						<float name="TextSize">41</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">true</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextLabel" referent="RBX9f472c3263b5485ea1ca0b59f3d86e26">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.882352948</R>
								<G>0.992156863</G>
								<B>0.619607866</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.388235301</R>
								<G>0.180392161</G>
								<B>0.388235301</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">2</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">1</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<string name="Name">Dialog-1</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>5</YO>
							</UDim2>
							<bool name="RichText">true</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>787</XO>
								<YS>0</YS>
								<YO>41</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">Raven: Go in the vortex, you said...</string>
							<Color3 name="TextColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">41</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">true</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
					</Item>
				</Item>
				<Item class="TextLabel" referent="RBX747577869f524df4b795f3a1d4f38ce7">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.992156863</R>
							<G>0.619607866</G>
							<B>0.941176474</B>
						</Color3>
						<float name="BackgroundTransparency">0</float>
						<Color3 name="BorderColor3">
							<R>0.388235301</R>
							<G>0.180392161</G>
							<B>0.388235301</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">2</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">1</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<string name="Name">Dialog-2</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>77</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>798</XO>
							<YS>0</YS>
							<YO>52</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text"></string>
						<Color3 name="TextColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">41</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">true</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextLabel" referent="RBXccc33305aa4a470c8ea87498f4acf0fc">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.992156863</R>
								<G>0.619607866</G>
								<B>0.941176474</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.388235301</R>
								<G>0.180392161</G>
								<B>0.388235301</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">2</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">1</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<string name="Name">Dialog-2</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>5</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>787</XO>
								<YS>0</YS>
								<YO>41</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">Britta: Whoa...</string>
							<Color3 name="TextColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">41</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">true</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
					</Item>
				</Item>
				<Item class="TextLabel" referent="RBX6337e4e15f8f4de5820de1fa21151439">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.882352948</R>
							<G>0.992156863</G>
							<B>0.619607866</B>
						</Color3>
						<float name="BackgroundTransparency">0</float>
						<Color3 name="BorderColor3">
							<R>0.388235301</R>
							<G>0.180392161</G>
							<B>0.388235301</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">2</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">1</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<string name="Name">Dialog-3</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>154</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>798</XO>
							<YS>0</YS>
							<YO>93</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text"></string>
						<Color3 name="TextColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">41</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">true</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextLabel" referent="RBX3510c5471e7f43189acce898176714e3">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.882352948</R>
								<G>0.992156863</G>
								<B>0.619607866</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.388235301</R>
								<G>0.180392161</G>
								<B>0.388235301</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">2</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">1</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<string name="Name">Dialog-3</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>5</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>787</XO>
								<YS>0</YS>
								<YO>82</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">Raven: What could possibly go wrong, you said...</string>
							<Color3 name="TextColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">41</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">true</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
					</Item>
				</Item>
				<Item class="TextLabel" referent="RBXf475e5e50b0840d590f6c2a64a2cd1ec">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.992156863</R>
							<G>0.619607866</G>
							<B>0.941176474</B>
						</Color3>
						<float name="BackgroundTransparency">0</float>
						<Color3 name="BorderColor3">
							<R>0.388235301</R>
							<G>0.180392161</G>
							<B>0.388235301</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">2</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">1</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<string name="Name">Dialog-4</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>272</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>798</XO>
							<YS>0</YS>
							<YO>52</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text"></string>
						<Color3 name="TextColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">41</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">true</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextLabel" referent="RBX55adc672a15847a4b335b1eebfbc998d">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.992156863</R>
								<G>0.619607866</G>
								<B>0.941176474</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.388235301</R>
								<G>0.180392161</G>
								<B>0.388235301</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">2</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">1</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<string name="Name">Dialog-4</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>5</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>787</XO>
								<YS>0</YS>
								<YO>41</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">Britta: Holy mother monkey milk...</string>
							<Color3 name="TextColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">41</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">true</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
					</Item>
				</Item>
				<Item class="TextLabel" referent="RBX265545c29a8841ebacb2be013773a68a">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.992156863</R>
							<G>0.894117653</G>
							<B>0.619607866</B>
						</Color3>
						<float name="BackgroundTransparency">0</float>
						<Color3 name="BorderColor3">
							<R>0.388235301</R>
							<G>0.180392161</G>
							<B>0.388235301</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">2</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">1</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<string name="Name">Dialog-5</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>349</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>798</XO>
							<YS>0</YS>
							<YO>52</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text"></string>
						<Color3 name="TextColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">41</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">true</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextLabel" referent="RBXfc829761c9644d5a83319181f0a39c3c">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.992156863</R>
								<G>0.894117653</G>
								<B>0.619607866</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.388235301</R>
								<G>0.180392161</G>
								<B>0.388235301</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">2</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">1</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<string name="Name">Dialog-5</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>5</XO>
								<YS>0</YS>
								<YO>5</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>787</XO>
								<YS>0</YS>
								<YO>41</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">Freckle: Lucinda hurt my feelings...</string>
							<Color3 name="TextColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">41</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">true</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
					</Item>
				</Item>
				<Item class="UIPadding" referent="RBXc1f1060dec3b46d8a140fe741a1c6dc7">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">DialogScrollerPadding</string>
						<UDim name="PaddingBottom">
							<S>0.0199999996</S>
							<O>0</O>
						</UDim>
						<UDim name="PaddingLeft">
							<S>0.0500000007</S>
							<O>0</O>
						</UDim>
						<UDim name="PaddingRight">
							<S>0.100000001</S>
							<O>0</O>
						</UDim>
						<UDim name="PaddingTop">
							<S>0.0199999996</S>
							<O>0</O>
						</UDim>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="TextButton" referent="RBX6d513484eaa948fd8decccbdff3a9ec4">
				<Properties>
					<bool name="Active">true</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoButtonColor">true</bool>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">0</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">3</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<bool name="Modal">false</bool>
					<string name="Name">NextPageButton</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0.800000012</XS>
						<XO>0</XO>
						<YS>0.173019737</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">true</bool>
					<bool name="Selected">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0.180000007</XS>
						<XO>0</XO>
						<YS>0.100000001</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">Next Page</string>
					<Color3 name="TextColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<bool name="TextScaled">true</bool>
					<float name="TextSize">14</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">1</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="UIPadding" referent="RBXac7f511d1b9b4d32830e57100a8fda94">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">UIPadding</string>
						<UDim name="PaddingBottom">
							<S>0</S>
							<O>0</O>
						</UDim>
						<UDim name="PaddingLeft">
							<S>0.100000001</S>
							<O>0</O>
						</UDim>
						<UDim name="PaddingRight">
							<S>0.100000001</S>
							<O>0</O>
						</UDim>
						<UDim name="PaddingTop">
							<S>0</S>
							<O>0</O>
						</UDim>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="TextButton" referent="RBX1454bcc09a554b44a61db9f293877e82">
				<Properties>
					<bool name="Active">true</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoButtonColor">true</bool>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">0</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">3</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<bool name="Modal">false</bool>
					<string name="Name">PrevPageButton</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0.800000012</XS>
						<XO>0</XO>
						<YS>0.0685789362</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">true</bool>
					<bool name="Selected">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0.180000007</XS>
						<XO>0</XO>
						<YS>0.100000001</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">Prev Page</string>
					<Color3 name="TextColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<bool name="TextScaled">true</bool>
					<float name="TextSize">50</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">1</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="UIPadding" referent="RBX084c3c7214424cddac4f4c2f6e850934">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">UIPadding</string>
						<UDim name="PaddingBottom">
							<S>0</S>
							<O>0</O>
						</UDim>
						<UDim name="PaddingLeft">
							<S>0.100000001</S>
							<O>0</O>
						</UDim>
						<UDim name="PaddingRight">
							<S>0.100000001</S>
							<O>0</O>
						</UDim>
						<UDim name="PaddingTop">
							<S>0</S>
							<O>0</O>
						</UDim>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="TextLabel" referent="RBX880bb28c5cbd49fd81fea178969c7738">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">0</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">3</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<string name="Name">PageNumLabel</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0.800000012</XS>
						<XO>0</XO>
						<YS>0.0115131652</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0.180000007</XS>
						<XO>0</XO>
						<YS>0.0500000007</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text"></string>
					<Color3 name="TextColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<bool name="TextScaled">true</bool>
					<float name="TextSize">14</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">1</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="UIPadding" referent="RBXc32e64ff2ec045f39da2d56025336acf">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">UIPadding</string>
						<UDim name="PaddingBottom">
							<S>0</S>
							<O>0</O>
						</UDim>
						<UDim name="PaddingLeft">
							<S>0.100000001</S>
							<O>0</O>
						</UDim>
						<UDim name="PaddingRight">
							<S>0.100000001</S>
							<O>0</O>
						</UDim>
						<UDim name="PaddingTop">
							<S>0</S>
							<O>0</O>
						</UDim>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="ScreenGui" referent="RBXca182206804a447597a0819ad1d8b773">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<int name="DisplayOrder">0</int>
				<bool name="Enabled">true</bool>
				<bool name="IgnoreGuiInset">false</bool>
				<string name="Name">ScreenGui</string>
				<bool name="ResetOnSpawn">true</bool>
				<Ref name="RootLocalizationTable">null</Ref>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<token name="ZIndexBehavior">0</token>
			</Properties>
		</Item>
	</Item>
	<Item class="LocalizationService" referent="RBX2c56f90e4d07415d811a5c47ec349a70">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">LocalizationService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="TeleportService" referent="RBX34246b244394463f8f0693bb267598bb">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Teleport Service</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="CollectionService" referent="RBX58020a60a04d4c639e3d862c578bcb70">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CollectionService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="PhysicsService" referent="RBXdb54b53337ef4cb4a0f78c1ab7553582">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">PhysicsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="Geometry" referent="RBX1fd54a232d1d43e7ac583aaa0fc4e516">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Geometry</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="InsertService" referent="RBX937c566eed5d4d32ba098d772f6fa125">
		<Properties>
			<bool name="AllowClientInsertModels">false</bool>
			<bool name="AllowInsertFreeModels">false</bool>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">InsertService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="GamePassService" referent="RBX0576cd73062d461bb079fb84cffd606d">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">GamePassService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="Debris" referent="RBX90974b922b784fb39fe87a3b1c35d791">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<int name="MaxItems">1000</int>
			<string name="Name">Debris</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="CookiesService" referent="RBX798a928c9f604ed78ad624dc9c61f8a7">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CookiesService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="VRService" referent="RBX8cb98e13b732472d9f74fea32958c0ca">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">VRService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="ContextActionService" referent="RBX7aef48aed82945588494d75acc28240b">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ContextActionService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="ScriptService" referent="RBXdbd44c0f08ac4a47bf8a6007998aa31a">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="AssetService" referent="RBX3398013ccbe64c1dbb00cff959228beb">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">AssetService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="TouchInputService" referent="RBX193e995ba56e4282bc93f89556788126">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">TouchInputService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="AnalyticsService" referent="RBXdab0b03d5f6b437eb1872b529eed1513">
		<Properties>
			<string name="ApiKey"></string>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">AnalyticsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="ModuleScript" referent="RBXad2a1eb1e2094572a194cee24e4e8fef">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">RobloxLSP_Settings</string>
				<string name="ScriptGuid">{50C8024D-9D1B-4B96-B76A-CF05D4DDA29D}</string>
				<ProtectedString name="Source"><![CDATA[return {
	port = 27843,
	startAutomatically = false,
	exclude = {
		-- game:GetService("Workspace")
	}
}]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
	</Item>
	<Item class="Selection" referent="RBXe17e565304b84eb5bbecf0df496376be">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Selection</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="ServerScriptService" referent="10">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="LoadStringEnabled">false</bool>
			<string name="Name">ServerScriptService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="ModuleScript" referent="11">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Source</string>
				<string name="ScriptGuid">{fff6187c-e823-4743-a48f-970df0bad40b}</string>
				<ProtectedString name="Source"><![CDATA[
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXa00fbda634454d1eacd310b978fd37f5">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">-- Demos</string>
					<string name="ScriptGuid">{4d5cbf4a-5070-46c3-a953-346312f90d75}</string>
					<ProtectedString name="Source"></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXc49035902f9d48d793440992537a4ad8">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">AddRemoteObjects</string>
					<string name="ScriptGuid">{f1cc327e-acb6-41a5-98aa-1bd0cc4b2383}</string>
					<ProtectedString name="Source"><![CDATA[
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBXc28227c0f7af41c9bc5c8717dbbaa895">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">AddToBase</string>
						<string name="ScriptGuid">{5b0290ad-cf36-4af9-807c-0f88e0f4c6d8}</string>
						<ProtectedString name="Source"><![CDATA[local module = {}
local Sss = game:GetService("ServerScriptService")
local SceneConfig = require(Sss.Source.QuestConfigs.ScenesConfig)

local Utils = require(Sss.Source.Utils.U001GeneralUtils)
local Scenes = require(Sss.Source.Scenes.Scenes)
local QuestBlock = require(Sss.Source.AddRemoteObjects.QuestBlock)
local Constants = require(Sss.Source.Constants.Constants)
local ConfigGame = require(Sss.Source.AddRemoteObjects.ConfigGame)

function addRemoteObjects()
    ConfigGame.configGame()

    -- Group quests into books that are separate islands
    local questConfigs = SceneConfig.getScenesConfig()

    if (Constants.singleScene) then
        -- slice out a single quest
        questConfigs = {questConfigs[1]}
        local sceneConfigs = questConfigs[1].sceneConfigs
        questConfigs[1].sceneConfigs = {sceneConfigs[1]}
        --  

    end

    local myStuff = workspace:FindFirstChild("MyStuff")

    local questsOrigin = Utils.getFirstDescendantByName(myStuff, "QuestsOrigin")
    local letterTemplate = Utils.getFirstDescendantByName(myStuff,
                                                          "LetterTemplate")

    -- local letters = {
    --     'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
    --     'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'
    -- }
    local letters = {'C'}

    for i, char in ipairs(letters) do
        local newLetter = letterTemplate:Clone()
        newLetter.Parent = letterTemplate.Parent
        newLetter.Name = "letter-" .. char

        local letterHandle = Utils.getFirstDescendantByName(newLetter, "Handle")

        letterHandle.CFrame = letterHandle.CFrame +
                                  Vector3.new(0, letterHandle.Size.Y * 1.5, 0)

        local textLabels = Utils.getDescendantsByName(letterHandle, "BlockChar")
        for i, label in ipairs(textLabels) do label.Text = char end

        newLetter.Equipped:Connect(function()
            print('equipped')
            newLetter.Parent = workspace
        end)
    end

    letterTemplate:Destroy()

    local runtimeQuestsFolder = Utils.getOrCreateFolder(
                                    {name = "RunTimeQuests", parent = myStuff})

    local sibling = questsOrigin
    local questBlockTemplate = Utils.getFromTemplates("QuestBox")

    -- add quests
    for questIndex, questConfig in ipairs(questConfigs) do
        local gridSize = questConfig.gridSize
        -- local startSceneCoords = questConfig.startSceneCoords
        -- local endSceneCoords = questConfig.ebdSceneCoords

        local desiredPadding = 12
        local wallWidth = 1
        local wallHeight = Constants.questWallHeight

        local sceneHeight = Constants.sceneHeight

        local wallSize = Vector3.new(wallWidth, wallHeight, wallWidth)
        local gridPadding = desiredPadding + wallWidth * 2

        local x = gridSize.cols * Constants.totalIslandLength + gridPadding -
                      Constants.bridgeLength
        local z = gridSize.rows * Constants.totalIslandLength + gridPadding -
                      Constants.bridgeLength

        local questBlockTemplateClone = Utils.cloneModel(
                                            {
                model = questBlockTemplate,
                suffix = "Clone-Q" .. questIndex
            })

        local questFolder = Utils.getOrCreateFolder(
                                {
                name = questBlockTemplateClone.Name,
                parent = runtimeQuestsFolder
            })
        questBlockTemplateClone.Parent = questFolder

        local questBlockProps = {
            parent = questsOrigin,
            size = Vector3.new(x, 2, z),
            sibling = sibling,
            wallSize = wallSize,
            sceneHeight = sceneHeight,
            questBlockTemplate = questBlockTemplateClone,
            index = questIndex
        }
        local questBlock = QuestBlock.renderQuestBlock(questBlockProps)

        -- questBlock.Transparency = 1
        local addScenesProps = {
            parent = questBlock,
            sceneConfigs = questConfig.sceneConfigs,
            questConfig = questConfig,
            gridPadding = gridPadding,
            questFolder = questFolder,
            questIndex = questIndex
        }
        Scenes.addScenes(addScenesProps)

        sibling = questBlock
    end
    questBlockTemplate:Destroy()

end

module.addRemoteObjects = addRemoteObjects
return module

]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXecec3749863c4205ac573ed6daecf7cb">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Part</string>
						<string name="ScriptGuid">{3b96471a-8c40-4f75-bc03-965e17accbe8}</string>
						<ProtectedString name="Source"><![CDATA[local module = {}

function createPartWithVectors(props)
    local parent = props.parent
    local size = props.size
    local name = props.name
    local position = props.position
    local decalId = props.decalId

    local newPart = Instance.new("Part", parent)

    newPart.Size = size
    newPart.Position = position
    newPart.Anchored = true
    newPart.BrickColor = props.color or BrickColor.new("Light blue")
    newPart.Name = name

    if decalId then
        local newDecal = Instance.new("Decal", newPart)
        newDecal.Texture = 'rbxassetid://' .. decalId
        newDecal.Face = 'Front'
    end

    return newPart

end

module.createPartWithVectors = createPartWithVectors
return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX9cce131c6b294a2294643c8c855d6519">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">RowOfParts</string>
						<string name="ScriptGuid">{d717e11a-0013-44af-af0d-f0c09d1e1811}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local Part = require(Sss.Source.AddRemoteObjects.Part)

local module = {}

function getParentFarEdge(props)
    local parent = props.parent
    local childSizeLength = props.childLength
    local axis = props.axis or 'X'

    local parentPosition = parent.CFrame
    local parentSize = parent.Size
    local parentFarEdge = parentPosition[axis] + parentSize[axis] / 2
    local alignedValue = parentFarEdge - childSizeLength / 2
    return alignedValue
end

function getPartFarEdge(props)
    local part = props.part
    return part.Position + (part.Size / 2) * props.alignToParentFarEdge

end

function getCenterPosFromDesiredEdgeOffset(props)
    local parent = props.parent
    local childSize = props.childSize

    -- Which direction does the offset move toward?
    local desiredOffset = props.offset or Vector3.new(0, 0, 0)
    local itemDuplicationConfig = props.itemDuplicationConfig

    -- Is the origin side of the box at the new offset location?
    local moveTowardZero = itemDuplicationConfig.moveTowardZero
    local alignToParentFarEdge = itemDuplicationConfig.alignToParentFarEdge

    local edgeProps = {
        part = parent,
        alignToParentFarEdge = alignToParentFarEdge
    }

    local parentEdge = getPartFarEdge(edgeProps)

    local parentOffsetPoint = parentEdge + desiredOffset + (childSize / 2) *
                                  moveTowardZero

    return parentOffsetPoint
end

function createRowOfParts(props)
    local rowProps = props.rowProps
    local itemConfigs = props.itemConfigs
    local itemProps = props.itemProps

    local parent = rowProps.parent
    local itemDuplicationConfig = rowProps.itemDuplicationConfig
    local gapBetweenRowItems = rowProps.gapBetweenRowItems

    local rowOfParts = {}
    local desiredOffsetFromParentEdge = rowProps.offset

    for i, itemConfig in ipairs(itemConfigs) do
        local offsetProps = {
            parent = parent,
            childSize = itemProps.size,
            itemDuplicationConfig = itemDuplicationConfig,
            offset = desiredOffsetFromParentEdge
        }

        local position = getCenterPosFromDesiredEdgeOffset(offsetProps)

        local newPartProps = {
            decalId = itemConfig.decalId,
            size = itemProps.size,
            name = itemProps.partName .. "-" .. i,
            position = position,
            parent = parent
        }

        rowOfParts[i] = Part.createPartWithVectors(newPartProps)

        local positionIncrement = Vector3.new(itemProps.size.X, 0, 0) +
                                      gapBetweenRowItems

        desiredOffsetFromParentEdge = desiredOffsetFromParentEdge +
                                          positionIncrement *
                                          rowProps.itemDuplicationConfig
                                              .alignToChildFarEdge

    end

    return rowOfParts
end

module.createRowOfParts = createRowOfParts
module.getCenterPosFromDesiredEdgeOffset = getCenterPosFromDesiredEdgeOffset

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXf42b65dddbe24313ae060f9817a7ef46">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">QuestBlock</string>
						<string name="ScriptGuid">{839da290-c62e-4ad8-a9de-64ff14bb0e07}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local Part = require(Sss.Source.AddRemoteObjects.Part)
local RowOfParts = require(Sss.Source.AddRemoteObjects.RowOfParts)
local Utils = require(Sss.Source.Utils.U001GeneralUtils)
local Constants = require(Sss.Source.Constants.Constants)

local module = {}

renderQuestBlock = function(props)
    local parent = props.parent
    local sibling = props.sibling
    local size = props.size
    local wallSize = props.wallSize
    local sceneHeight = props.sceneHeight
    local dockModel = props.questBlockTemplate
    local index = props.index
    local isFirst = index == 1

    local dockBase = Utils.getFirstDescendantByName(dockModel, "DockBase")
    local dockBasement1 = Utils.getFirstDescendantByName(dockModel,
                                                         "DockBasement1")
    local dockBasement2 = Utils.getFirstDescendantByName(dockModel,
                                                         "DockBasement2")

    local dockWallFront = Utils.getFirstDescendantByName(dockModel,
                                                         "DockWallFront")
    local dockWallBack = Utils.getFirstDescendantByName(dockModel,
                                                        "DockWallBack")
    local dockWallRight = Utils.getFirstDescendantByName(dockModel,
                                                         "DockWallRight")
    local dockWallLeft = Utils.getFirstDescendantByName(dockModel,
                                                        "DockWallLeft")

    local offsetX = -100
    local offsetY = -sceneHeight / 2
    local offsetZ = 0

    if (isFirst) then
        offsetX = 0
        offsetY = 0
        offsetZ = 0
    end

    local desiredOffsetFromParentEdge = nil
    local itemDuplicationConfig = nil

    desiredOffsetFromParentEdge = Vector3.new(offsetX, offsetY, offsetZ)
    itemDuplicationConfig = {
        alignToParentFarEdge = Vector3.new(-1, -1, -1),
        moveTowardZero = Vector3.new(-1, 1, 1),
        alignToChildFarEdge = Vector3.new(1, -1, 1)
    }

    local offsetProps = {
        parent = sibling,
        childSize = size,
        itemDuplicationConfig = itemDuplicationConfig,
        offset = desiredOffsetFromParentEdge
    }

    local childPos = RowOfParts.getCenterPosFromDesiredEdgeOffset(offsetProps)

    local blockProps = {
        name = 'QuestContainer',
        parent = parent,

        material = Enum.Material.DiamondPlate,
        color = BrickColor.new("Bright red"),
        size = size,
        position = childPos
    }

    local dockPositioner = Part.createPartWithVectors(blockProps)

    dockBase.CFrame = dockPositioner.CFrame
    dockBase.Size = dockPositioner.Size
    dockBasement1.CFrame = dockPositioner.CFrame
    dockBasement1.Size = dockPositioner.Size
    dockBasement2.CFrame = dockPositioner.CFrame
    dockBasement2.Size = dockPositioner.Size

    renderFrontWall({
        parent = dockBase,
        wallSize = wallSize,
        template = dockWallFront
    })
    renderBackWall({
        parent = dockBase,
        wallSize = wallSize,
        template = dockWallBack
    })
    renderLeftWall({
        parent = dockBase,
        wallSize = wallSize,
        template = dockWallLeft
    })
    renderRightWall({
        parent = dockBase,
        wallSize = wallSize,
        template = dockWallRight
    })

    dockPositioner:Destroy()

    return dockBase
end

renderFrontWall = function(props)
    local parent = props.parent
    local wallSize = props.wallSize
    local template = props.template

    local childSize = Vector3.new(parent.Size.X, wallSize.Y, wallSize.Z)

    local itemDuplicationConfig = {
        alignToParentFarEdge = Vector3.new(1, 1, -1),
        moveTowardZero = Vector3.new(-1, 1, 1),
        alignToChildFarEdge = Vector3.new(-1, -1, -1)
    }

    local offsetProps = {
        parent = parent,
        childSize = childSize,
        itemDuplicationConfig = itemDuplicationConfig
    }

    template.Size = childSize
    template.Position =
        RowOfParts.getCenterPosFromDesiredEdgeOffset(offsetProps)
end

renderBackWall = function(props)
    local parent = props.parent
    local wallSize = props.wallSize
    local template = props.template

    local childSize = Vector3.new(parent.Size.X, wallSize.Y, wallSize.Z)

    local itemDuplicationConfig = {
        alignToParentFarEdge = Vector3.new(1, 1, 1),
        moveTowardZero = Vector3.new(-1, 1, -1),
        alignToChildFarEdge = Vector3.new(-1, -1, 1)
    }

    local offsetProps = {
        parent = parent,
        childSize = childSize,
        itemDuplicationConfig = itemDuplicationConfig
    }

    template.Size = childSize
    template.Position =
        RowOfParts.getCenterPosFromDesiredEdgeOffset(offsetProps)
end

renderLeftWall = function(props)
    local parent = props.parent
    local wallSize = props.wallSize
    local template = props.template

    local childSize = Vector3.new(wallSize.X, wallSize.Y, parent.Size.Z)

    local itemDuplicationConfig = {
        alignToParentFarEdge = Vector3.new(1, 1, -1),
        moveTowardZero = Vector3.new(-1, 1, 1),
        alignToChildFarEdge = Vector3.new(-1, -1, -1)
    }

    local offsetProps = {
        parent = parent,
        childSize = childSize,
        itemDuplicationConfig = itemDuplicationConfig
    }

    template.Size = childSize
    template.Position =
        RowOfParts.getCenterPosFromDesiredEdgeOffset(offsetProps)
end

renderRightWall = function(props)
    local parent = props.parent
    local wallSize = props.wallSize
    local template = props.template
    local childSize = Vector3.new(wallSize.X, wallSize.Y, parent.Size.Z)

    local itemDuplicationConfig = {
        alignToParentFarEdge = Vector3.new(-1, 1, -1),
        moveTowardZero = Vector3.new(1, 1, 1),
        alignToChildFarEdge = Vector3.new(1, -1, -1)
    }

    local offsetProps = {
        parent = parent,
        childSize = childSize,
        itemDuplicationConfig = itemDuplicationConfig
    }

    template.Size = childSize
    template.Position =
        RowOfParts.getCenterPosFromDesiredEdgeOffset(offsetProps)
end

module.renderQuestBlock = renderQuestBlock

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXc2c7c9534db947329b3833cef6374812">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ConfigGame</string>
						<string name="ScriptGuid">{b1f17e4c-b2f3-450a-bf5c-e3d011b6e429}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local Utils = require(Sss.Source.Utils.U001GeneralUtils)

local collectionService = game:GetService("CollectionService")

local module = {}
function configPlayers()
    local Players = game:GetService("Players")
    Players.RespawnTime = 0

    local function onCharacterAdded(character)
        character:WaitForChild("Humanoid").WalkSpeed = 30
    end

    local function onPlayerAdded(player)
        player.CharacterAdded:Connect(onCharacterAdded)
    end

    Players.PlayerAdded:Connect(onPlayerAdded)

end

function setVisibility()
    local testLabBase = Utils.getFirstDescendantByName(workspace, "TestLabBase")
    testLabBase:Destroy()

    local taggedPartsTransparent = collectionService:GetTagged("Transparent")

    for i, item in ipairs(taggedPartsTransparent) do
        Utils.setItemAndChildrenPropsByInst(
            {
                item = item,
                props = {Transparency = 1, CanCollide = false, Anchored = true}
            })
    end

    local itemsToHideAtRuntine = {'QuestsOrigin', 'TerrainBase'}
    for i, item in ipairs(itemsToHideAtRuntine) do
        Utils.hideItemAndChildrenByName({name = item, hide = true})
    end

    Utils.setItemAndChildrenPropsByName({
        name = "DockWalls",
        props = {Transparency = 1}
    })

    Utils.setItemAndChildrenPropsByName({
        name = "DockBase",
        props = {Transparency = 1}
    })

    Utils.setWallHeightbyParentModelName({name = "BridgeWalls", height = 2})
    Utils.setItemAndChildrenPropsByName({
        name = "BridgeWalls",
        props = {Transparency = 0.6, CanCollide = true, Anchored = true}
    })

    Utils.setItemAndChildrenPropsByName({
        name = "BaseWalls",
        props = {Transparency = 0.6, CanCollide = true, Anchored = true}
    })

    Utils.setWallHeightbyParentModelName({name = "BaseWalls", height = 2})

    local tagBaseWallTransparent = collectionService:GetTagged(
                                       "BaseWallTransparent")
    Utils.setWallHeightByList({items = tagBaseWallTransparent, height = 16})
    Utils.setPropsByTag({
        tag = "BaseWallTransparent",
        props = {Transparency = 1}
        -- props = {Transparency = 0.6}
    })

    local skyBoxWalls = collectionService:GetTagged("SkyBoxWalls")
    Utils.setWallHeightByList({items = skyBoxWalls, height = 30})
    Utils.setPropsByTag({
        tag = "SkyBoxWalls",
        props = {Transparency = .9}
        -- props = {Transparency = 0.6}
    })

end
function module.configGame()
    setVisibility()
    configPlayers()
    -- Utils.reportPlayerLocation()
end

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX3cd467b8cd41417faf4d1c12b8e3ebff">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">test</string>
					<string name="ScriptGuid">{a540e4ea-ce31-4ee2-9003-ac993a092b81}</string>
					<ProtectedString name="Source"><![CDATA[local module = {}

function module.func001()
    -- 
end

return module

]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX0e9c500d4ebf440a9f3a12551ff0991d">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Utils</string>
					<string name="ScriptGuid">{4dc90c15-033c-41ff-b30a-4ab544d42a5d}</string>
					<ProtectedString name="Source"><![CDATA[
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX93dc984d7b654f5eb189ec80e5f80060">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">GarrysMods</string>
						<string name="ScriptGuid">{3b9f81eb-3fbe-421e-88aa-d5ab745b61f0}</string>
						<ProtectedString name="Source"><![CDATA[-- --[[---------------------------------------------------------
-- 	Name: Inherit( t, base )
-- 	Desc: Copies any missing data from base to t
-- -----------------------------------------------------------]]
-- function table.Inherit( t, base )
-- 	for k, v in pairs( base ) do
-- 		if ( t[ k ] == nil ) then t[ k ] = v end
-- 	end
-- 	t[ "BaseClass" ] = base
-- 	return t
-- end
-- --[[---------------------------------------------------------
-- 	Name: Copy(t, lookup_table)
-- 	Desc: Taken straight from http://lua-users.org/wiki/PitLibTablestuff
-- 		and modified to the new Lua 5.1 code by me.
-- 		Original function by PeterPrade!
-- -----------------------------------------------------------]]
-- function table.Copy( t, lookup_table )
-- 	if ( t == nil ) then return nil end
-- 	local copy = {}
-- 	setmetatable( copy, debug.getmetatable( t ) )
-- 	for i, v in pairs( t ) do
-- 		if ( istable( v ) ) then
-- 			copy[ i ] = v
-- 		else
-- 			lookup_table = lookup_table or {}
-- 			lookup_table[ t ] = copy
-- 			if ( lookup_table[ v ] ) then
-- 				copy[ i ] = lookup_table[ v ] -- we already copied this table. reuse the copy.
-- 			else
-- 				copy[ i ] = table.Copy( v, lookup_table ) -- not yet copied. copy it.
-- 			end
-- 		end
-- 	end
-- 	return copy
-- end
-- --[[---------------------------------------------------------
-- 	Name: Empty( tab )
-- 	Desc: Empty a table
-- -----------------------------------------------------------]]
-- function table.Empty( tab )
-- 	for k, v in pairs( tab ) do
-- 		tab[ k ] = nil
-- 	end
-- end
-- --[[---------------------------------------------------------
-- 	Name: IsEmpty( tab )
-- 	Desc: Returns whether a table has iterable items in it, useful for non-sequential tables
-- -----------------------------------------------------------]]
-- function table.IsEmpty( tab )
-- 	return next( tab ) == nil
-- end
-- --[[---------------------------------------------------------
-- 	Name: CopyFromTo( FROM, TO )
-- 	Desc: Make TO exactly the same as FROM - but still the same table.
-- -----------------------------------------------------------]]
-- function table.CopyFromTo( from, to )
-- 	-- Erase values from table TO
-- 	table.Empty( to )
-- 	-- Copy values over
-- 	table.Merge( to, from )
-- end
-- --[[---------------------------------------------------------
-- 	Name: Merge
-- 	Desc: xx
-- -----------------------------------------------------------]]
-- function table.Merge( dest, source )
-- 	for k, v in pairs( source ) do
-- 		if ( istable( v ) && istable( dest[ k ] ) ) then
-- 			-- don't overwrite one table with another
-- 			-- instead merge them recurisvely
-- 			table.Merge( dest[ k ], v )
-- 		else
-- 			dest[ k ] = v
-- 		end
-- 	end
-- 	return dest
-- end
-- --[[---------------------------------------------------------
-- 	Name: HasValue
-- 	Desc: Returns whether the value is in given table
-- -----------------------------------------------------------]]
-- function table.HasValue( t, val )
-- 	for k, v in pairs( t ) do
-- 		if ( v == val ) then return true end
-- 	end
-- 	return false
-- end
-- --[[---------------------------------------------------------
-- 	Name: table.Add( dest, source )
-- 	Desc: Unlike merge this adds the two tables together and discards keys.
-- -----------------------------------------------------------]]
-- function table.Add( dest, source )
-- 	-- At least one of them needs to be a table or this whole thing will fall on its ass
-- 	if ( !istable( source ) ) then return dest end
-- 	if ( !istable( dest ) ) then dest = {} end
-- 	for k, v in pairs( source ) do
-- 		table.insert( dest, v )
-- 	end
-- 	return dest
-- end
-- --[[---------------------------------------------------------
-- 	Name: table.SortDesc( table )
-- 	Desc: Like Lua's default sort, but descending
-- -----------------------------------------------------------]]
-- function table.SortDesc( t )
-- 	return table.sort( t, function( a, b ) return a > b end )
-- end
-- --[[---------------------------------------------------------
-- 	Name: table.SortByKey( table )
-- 	Desc: Returns a table sorted numerically by Key value
-- -----------------------------------------------------------]]
-- function table.SortByKey( t, desc )
-- 	local temp = {}
-- 	for key, _ in pairs( t ) do table.insert( temp, key ) end
-- 	if ( desc ) then
-- 		table.sort( temp, function( a, b ) return t[ a ] < t[ b ] end )
-- 	else
-- 		table.sort( temp, function( a, b ) return t[ a ] > t[ b ] end )
-- 	end
-- 	return temp
-- end
-- --[[---------------------------------------------------------
-- 	Name: table.Count( table )
-- 	Desc: Returns the number of keys in a table
-- -----------------------------------------------------------]]
-- function table.Count( t )
-- 	local i = 0
-- 	for k in pairs( t ) do i = i + 1 end
-- 	return i
-- end
-- --[[---------------------------------------------------------
-- 	Name: table.Random( table )
-- 	Desc: Return a random key
-- -----------------------------------------------------------]]
-- function table.Random( t )
-- 	local rk = math.random( 1, table.Count( t ) )
-- 	local i = 1
-- 	for k, v in pairs( t ) do
-- 		if ( i == rk ) then return v, k end
-- 		i = i + 1
-- 	end
-- end
-- --[[----------------------------------------------------------------------
-- 	Name: table.IsSequential( table )
-- 	Desc: Returns true if the tables
-- 		keys are sequential
-- -------------------------------------------------------------------------]]
-- function table.IsSequential( t )
-- 	local i = 1
-- 	for key, value in pairs( t ) do
-- 		if ( t[ i ] == nil ) then return false end
-- 		i = i + 1
-- 	end
-- 	return true
-- end
-- --[[---------------------------------------------------------
-- 	Name: table.ToString( table,name,nice )
-- 	Desc: Convert a simple table to a string
-- 		table = the table you want to convert (table)
-- 		name  = the name of the table (string)
-- 		nice  = whether to add line breaks and indents (bool)
-- -----------------------------------------------------------]]
-- local function MakeTable( t, nice, indent, done )
-- 	local str = ""
-- 	local done = done or {}
-- 	local indent = indent or 0
-- 	local idt = ""
-- 	if nice then idt = string.rep( "\t", indent ) end
-- 	local nl, tab  = "", ""
-- 	if ( nice ) then nl, tab = "\n", "\t" end
-- 	local sequential = table.IsSequential( t )
-- 	for key, value in pairs( t ) do
-- 		str = str .. idt .. tab .. tab
-- 		if !sequential then
-- 			if ( isnumber( key ) or isbool( key ) ) then
-- 				key = "[" .. tostring( key ) .. "]" .. tab .. "="
-- 			else
-- 				key = tostring( key ) .. tab .. "="
-- 			end
-- 		else
-- 			key = ""
-- 		end
-- 		if ( istable( value ) && !done[ value ] ) then
-- 			if ( IsColor( value ) ) then
-- 				done[ value ] = true
-- 				value = "Color(" .. value.r .. "," .. value.g .. "," .. value.b .. "," .. value.a .. ")"
-- 				str = str .. key .. tab .. value .. "," .. nl
-- 			else
-- 				done[ value ] = true
-- 				str = str .. key .. tab .. '{' .. nl .. MakeTable (value, nice, indent + 1, done)
-- 				str = str .. idt .. tab .. tab ..tab .. tab .."},".. nl
-- 			end
-- 		else
-- 			if ( isstring( value ) ) then
-- 				value = '"' .. tostring( value ) .. '"'
-- 			elseif ( isvector( value ) ) then
-- 				value = "Vector(" .. value.x .. "," .. value.y .. "," .. value.z .. ")"
-- 			elseif ( isangle( value ) ) then
-- 				value = "Angle(" .. value.pitch .. "," .. value.yaw .. "," .. value.roll .. ")"
-- 			else
-- 				value = tostring( value )
-- 			end
-- 			str = str .. key .. tab .. value .. "," .. nl
-- 		end
-- 	end
-- 	return str
-- end
-- function table.ToString( t, n, nice )
-- 	local nl, tab  = "", ""
-- 	if ( nice ) then nl, tab = "\n", "\t" end
-- 	local str = ""
-- 	if ( n ) then str = n .. tab .. "=" .. tab end
-- 	return str .. "{" .. nl .. MakeTable( t, nice ) .. "}"
-- end
-- --[[---------------------------------------------------------
-- 	Name: table.Sanitise( table )
-- 	Desc: Converts a table containing vectors, angles, bools so it can be converted to and from keyvalues
-- -----------------------------------------------------------]]
-- function table.Sanitise( t, done )
-- 	local done = done or {}
-- 	local tbl = {}
-- 	for k, v in pairs ( t ) do
-- 		if ( istable( v ) and !done[ v ] ) then
-- 			done[ v ] = true
-- 			tbl[ k ] = table.Sanitise( v, done )
-- 		else
-- 			if ( isvector( v ) ) then
-- 				local x, y, z = v.x, v.y, v.z
-- 				if y == 0 then y = nil end
-- 				if z == 0 then z = nil end
-- 				tbl[ k ] = { __type = "Vector", x = x, y = y, z = z }
-- 			elseif ( isangle( v ) ) then
-- 				local p, y, r = v.pitch, v.yaw, v.roll
-- 				if p == 0 then p = nil end
-- 				if y == 0 then y = nil end
-- 				if r == 0 then r = nil end
-- 				tbl[ k ] = { __type = "Angle", p = p, y = y, r = r }
-- 			elseif ( isbool( v ) ) then
-- 				tbl[ k ] = { __type = "Bool", tostring( v ) }
-- 			else
-- 				tbl[ k ] = tostring( v )
-- 			end
-- 		end
-- 	end
-- 	return tbl
-- end
-- --[[---------------------------------------------------------
-- 	Name: table.DeSanitise( table )
-- 	Desc: Converts a Sanitised table back
-- -----------------------------------------------------------]]
-- function table.DeSanitise( t, done )
-- 	local done = done or {}
-- 	local tbl = {}
-- 	for k, v in pairs ( t ) do
-- 		if ( istable( v ) and !done[ v ] ) then
-- 			done[ v ] = true
-- 			if ( v.__type ) then
-- 				if ( v.__type == "Vector" ) then
-- 					tbl[ k ] = Vector( v.x, v.y, v.z )
-- 				elseif ( v.__type == "Angle" ) then
-- 					tbl[ k ] = Angle( v.p, v.y, v.r )
-- 				elseif ( v.__type == "Bool" ) then
-- 					tbl[ k ] = ( v[ 1 ] == "true" )
-- 				end
-- 			else
-- 				tbl[ k ] = table.DeSanitise( v, done )
-- 			end
-- 		else
-- 			tbl[ k ] = v
-- 		end
-- 	end
-- 	return tbl
-- end
-- function table.ForceInsert( t, v )
-- 	if ( t == nil ) then t = {} end
-- 	table.insert( t, v )
-- 	return t
-- end
-- --[[---------------------------------------------------------
-- 	Name: table.SortByMember( table )
-- 	Desc: Sorts table by named member
-- -----------------------------------------------------------]]
-- function table.SortByMember( Table, MemberName, bAsc )
-- 	local TableMemberSort = function( a, b, MemberName, bReverse )
-- 		--
-- 		-- All this error checking kind of sucks, but really is needed
-- 		--
-- 		if ( !istable( a ) ) then return !bReverse end
-- 		if ( !istable( b ) ) then return bReverse end
-- 		if ( !a[ MemberName ] ) then return !bReverse end
-- 		if ( !b[ MemberName ] ) then return bReverse end
-- 		if ( isstring( a[ MemberName ] ) ) then
-- 			if ( bReverse ) then
-- 				return a[ MemberName ]:lower() < b[ MemberName ]:lower()
-- 			else
-- 				return a[ MemberName ]:lower() > b[ MemberName ]:lower()
-- 			end
-- 		end
-- 		if ( bReverse ) then
-- 			return a[ MemberName ] < b[ MemberName ]
-- 		else
-- 			return a[ MemberName ] > b[ MemberName ]
-- 		end
-- 	end
-- 	table.sort( Table, function( a, b ) return TableMemberSort( a, b, MemberName, bAsc or false ) end )
-- end
-- --[[---------------------------------------------------------
-- 	Name: table.LowerKeyNames( table )
-- 	Desc: Lowercase the keynames of all tables
-- -----------------------------------------------------------]]
-- function table.LowerKeyNames( Table )
-- 	local OutTable = {}
-- 	for k, v in pairs( Table ) do
-- 		-- Recurse
-- 		if ( istable( v ) ) then
-- 			v = table.LowerKeyNames( v )
-- 		end
-- 		OutTable[ k ] = v
-- 		if ( isstring( k ) ) then
-- 			OutTable[ k ]  = nil
-- 			OutTable[ string.lower( k ) ] = v
-- 		end
-- 	end
-- 	return OutTable
-- end
-- --[[---------------------------------------------------------
-- 	Name: table.LowerKeyNames( table )
-- 	Desc: Lowercase the keynames of all tables
-- -----------------------------------------------------------]]
-- function table.CollapseKeyValue( Table )
-- 	local OutTable = {}
-- 	for k, v in pairs( Table ) do
-- 		local Val = v.Value
-- 		if ( istable( Val ) ) then
-- 			Val = table.CollapseKeyValue( Val )
-- 		end
-- 		OutTable[ v.Key ] = Val
-- 	end
-- 	return OutTable
-- end
-- --[[---------------------------------------------------------
-- 	Name: table.ClearKeys( table, bSaveKey )
-- 	Desc: Clears the keys, converting to a numbered format
-- -----------------------------------------------------------]]
-- function table.ClearKeys( Table, bSaveKey )
-- 	local OutTable = {}
-- 	for k, v in pairs( Table ) do
-- 		if ( bSaveKey ) then
-- 			v.__key = k
-- 		end
-- 		table.insert( OutTable, v )
-- 	end
-- 	return OutTable
-- end
-- local function keyValuePairs( state )
-- 	state.Index = state.Index + 1
-- 	local keyValue = state.KeyValues[ state.Index ]
-- 	if ( not keyValue ) then return end
-- 	return keyValue.key, keyValue.val
-- end
-- local function toKeyValues( tbl )
-- 	local result = {}
-- 	for k,v in pairs( tbl ) do
-- 		table.insert( result, { key = k, val = v } )
-- 	end
-- 	return result
-- end
-- --[[---------------------------------------------------------
-- 	A Pairs function
-- 		Sorted by TABLE KEY
-- -----------------------------------------------------------]]
-- function SortedPairs( pTable, Desc )
-- 	local sortedTbl = toKeyValues( pTable )
-- 	if ( Desc ) then
-- 		table.sort( sortedTbl, function( a, b ) return a.key > b.key end )
-- 	else
-- 		table.sort( sortedTbl, function( a, b ) return a.key < b.key end )
-- 	end
-- 	return keyValuePairs, { Index = 0, KeyValues = sortedTbl }
-- end
-- --[[---------------------------------------------------------
-- 	A Pairs function
-- 		Sorted by VALUE
-- -----------------------------------------------------------]]
-- function SortedPairsByValue( pTable, Desc )
-- 	local sortedTbl = toKeyValues( pTable )
-- 	if ( Desc ) then
-- 		table.sort( sortedTbl, function( a, b ) return a.val > b.val end )
-- 	else
-- 		table.sort( sortedTbl, function( a, b ) return a.val < b.val end )
-- 	end
-- 	return keyValuePairs, { Index = 0, KeyValues = sortedTbl }
-- end
-- --[[---------------------------------------------------------
-- 	A Pairs function
-- 		Sorted by Member Value (All table entries must be a table!)
-- -----------------------------------------------------------]]
-- function SortedPairsByMemberValue( pTable, pValueName, Desc )
-- 	local sortedTbl = toKeyValues( pTable )
-- 	for k,v in pairs( sortedTbl ) do
-- 		v.member = v.val[ pValueName ]
-- 	end
-- 	table.SortByMember( sortedTbl, "member", !Desc )
-- 	return keyValuePairs, { Index = 0, KeyValues = sortedTbl }
-- end
-- --[[---------------------------------------------------------
-- 	A Pairs function
-- -----------------------------------------------------------]]
-- function RandomPairs( pTable, Desc )
-- 	local sortedTbl = toKeyValues( pTable )
-- 	for k,v in pairs( sortedTbl ) do
-- 		v.rand = math.random( 1, 1000000 )
-- 	end
-- 	-- descending/ascending for a random order, really?
-- 	if ( Desc ) then
-- 		table.sort( sortedTbl, function(a,b) return a.rand > b.rand end )
-- 	else
-- 		table.sort( sortedTbl, function(a,b) return a.rand < b.rand end )
-- 	end
-- 	return keyValuePairs, { Index = 0, KeyValues = sortedTbl }
-- end
-- --[[---------------------------------------------------------
-- 	GetFirstKey
-- -----------------------------------------------------------]]
-- function table.GetFirstKey( t )
-- 	local k, v = next( t )
-- 	return k
-- end
-- function table.GetFirstValue( t )
-- 	local k, v = next( t )
-- 	return v
-- end
-- function table.GetLastKey( t )
-- 	local k, v = next( t, table.Count( t ) - 1 )
-- 	return k
-- end
-- function table.GetLastValue( t )
-- 	local k, v = next( t, table.Count( t ) - 1 )
-- 	return v
-- end
-- function table.FindNext( tab, val )
-- 	local bfound = false
-- 	for k, v in pairs( tab ) do
-- 		if ( bfound ) then return v end
-- 		if ( val == v ) then bfound = true end
-- 	end
-- 	return table.GetFirstValue( tab )
-- end
-- function table.FindPrev( tab, val )
-- 	local last = table.GetLastValue( tab )
-- 	for k, v in pairs( tab ) do
-- 		if ( val == v ) then return last end
-- 		last = v
-- 	end
-- 	return last
-- end
-- function table.GetWinningKey( tab )
-- 	local highest = -math.huge
-- 	local winner = nil
-- 	for k, v in pairs( tab ) do
-- 		if ( v > highest ) then
-- 			winner = k
-- 			highest = v
-- 		end
-- 	end
-- 	return winner
-- end
-- function table.KeyFromValue( tbl, val )
-- 	for key, value in pairs( tbl ) do
-- 		if ( value == val ) then return key end
-- 	end
-- end
-- function table.RemoveByValue( tbl, val )
-- 	local key = table.KeyFromValue( tbl, val )
-- 	if ( not key ) then return false end
-- 	table.remove( tbl, key )
-- 	return key
-- end
-- function table.KeysFromValue( tbl, val )
-- 	local res = {}
-- 	for key, value in pairs( tbl ) do
-- 		if ( value == val ) then res[ #res + 1 ] = key end
-- 	end
-- 	return res
-- end
-- function table.Reverse( tbl )
-- 	local len = #tbl
-- 	local ret = {}
-- 	for i = len, 1, -1 do
-- 		ret[ len - i + 1 ] = tbl[ i ]
-- 	end
-- 	return ret
-- end
-- function table.ForEach( tab, funcname )
-- 	for k, v in pairs( tab ) do
-- 		funcname( k, v )
-- 	end
-- end
-- function table.GetKeys( tab )
-- 	local keys = {}
-- 	local id = 1
-- 	for k, v in pairs( tab ) do
-- 		keys[ id ] = k
-- 		id = id + 1
-- 	end
-- 	return keys
-- end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX9d5add13ed264f619f7fdeee904910c2">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">GarrysModsUtil</string>
						<string name="ScriptGuid">{01ebed03-27c8-4a93-9f89-8495cad8f14a}</string>
						<ProtectedString name="Source"><![CDATA[-- -- Return if there's nothing to add on to
-- if ( !util ) then return end
-- if ( CLIENT ) then
-- 	include( "util/worldpicker.lua" )
-- end
-- --[[---------------------------------------------------------
--    Name:	IsValidPhysicsObject
--    Params:	<ent> <num>
--    Desc:	Returns true if physics object is valid, false if not
-- -----------------------------------------------------------]]
-- function util.IsValidPhysicsObject( ent, num )
-- 	-- Make sure the entity is valid
-- 	if ( !ent || ( !ent:IsValid() && !ent:IsWorld() ) ) then return false end
-- 	-- This is to stop attaching to walking NPCs.
-- 	-- Although this is possible and `works', it can severly reduce the
-- 	-- performance of the server.. Plus they don't pay attention to constraints
-- 	-- anyway - so we're not really losing anything.
-- 	local MoveType = ent:GetMoveType()
-- 	if ( !ent:IsWorld() && MoveType != MOVETYPE_VPHYSICS && !( ent:GetModel() && ent:GetModel():StartWith( "*" ) ) ) then return false end
-- 	local Phys = ent:GetPhysicsObjectNum( num )
-- 	return IsValid( Phys )
-- end
-- --[[---------------------------------------------------------
-- 	Name: GetPlayerTrace( ply, dir )
-- 	Desc: Returns a generic trace table for the player
-- 			(dir is optional, defaults to the player's aim)
-- -----------------------------------------------------------]]
-- function util.GetPlayerTrace( ply, dir )
-- 	dir = dir or ply:GetAimVector()
-- 	local trace = {}
-- 	trace.start = ply:EyePos()
-- 	trace.endpos = trace.start + ( dir * ( 4096 * 8 ) )
-- 	trace.filter = ply
-- 	return trace
-- end
-- --[[---------------------------------------------------------
-- 	Name: QuickTrace( origin, offset, filter )
-- 	Desc: Quick trace
-- -----------------------------------------------------------]]
-- function util.QuickTrace( origin, dir, filter )
-- 	local trace = {}
-- 	trace.start = origin
-- 	trace.endpos = origin + dir
-- 	trace.filter = filter
-- 	return util.TraceLine( trace )
-- end
-- --[[---------------------------------------------------------
-- 	Name: tobool( in )
-- 	Desc: Turn variable into bool
-- -----------------------------------------------------------]]
-- util.tobool = tobool
-- --[[---------------------------------------------------------
-- 	Name: LocalToWorld( ent, lpos, bone )
-- 	Desc: Convert the local position on an entity to world pos
-- -----------------------------------------------------------]]
-- function util.LocalToWorld( ent, lpos, bone )
-- 	bone = bone or 0
-- 	if ( ent:EntIndex() == 0 ) then
-- 		return lpos
-- 	else
-- 		if ( IsValid( ent:GetPhysicsObjectNum( bone ) ) ) then
-- 			return ent:GetPhysicsObjectNum( bone ):LocalToWorld( lpos )
-- 		else
-- 			return ent:LocalToWorld( lpos )
-- 		end
-- 	end
-- 	return nil
-- end
-- --[[---------------------------------------------------------
-- 	Returns year, month, day and hour, minute, second in a formatted string.
-- -----------------------------------------------------------]]
-- function util.DateStamp()
-- 	local t = os.date( '*t' )
-- 	return t.year .. "-" .. t.month .. "-" .. t.day .. " " .. Format( "%02i-%02i-%02i", t.hour, t.min, t.sec )
-- end
-- --[[---------------------------------------------------------
-- 	Convert a string to a certain type
-- -----------------------------------------------------------]]
-- function util.StringToType( str, typename )
-- 	typename = typename:lower()
-- 	if ( typename == "vector" )	then return Vector( str ) end
-- 	if ( typename == "angle" )	then return Angle( str ) end
-- 	if ( typename == "float" )	then return tonumber( str ) end
-- 	if ( typename == "int" )	then return math.Round( tonumber( str ) ) end
-- 	if ( typename == "bool" )	then return tobool( str ) end
-- 	if ( typename == "string" )	then return tostring( str ) end
-- 	MsgN( "util.StringToType: unknown type \"", typename, "\"!" )
-- end
-- --
-- -- Convert a type to a (nice, but still parsable) string
-- --
-- function util.TypeToString( v )
-- 	local iD = TypeID( v )
-- 	if ( iD == TYPE_VECTOR or iD == TYPE_ANGLE ) then
-- 		return string.format( "%.2f %.2f %.2f", v:Unpack() )
-- 	end
-- 	if ( iD == TYPE_NUMBER ) then
-- 		return util.NiceFloat( v )
-- 	end
-- 	return tostring( v )
-- end
-- --
-- -- Formats a float by stripping off extra 0's and .'s
-- --
-- --	0.00	->		0
-- --	0.10	->		0.1
-- --	1.00	->		1
-- --	1.49	->		1.49
-- --	5.90	->		5.9
-- --
-- function util.NiceFloat( f )
-- 	local str = string.format( "%f", f )
-- 	str = str:TrimRight( "0" )
-- 	str = str:TrimRight( "." )
-- 	return str
-- end
-- --
-- -- Timer
-- --
-- --
-- local T =
-- {
-- 	--
-- 	-- Resets the timer to nothing
-- 	--
-- 	Reset = function( self )
-- 		self.endtime = nil
-- 	end,
-- 	--
-- 	-- Starts the timer, call with end time
-- 	--
-- 	Start = function( self, time )
-- 		self.endtime = CurTime() + time
-- 	end,
-- 	--
-- 	-- Returns true if the timer has been started
-- 	--
-- 	Started = function( self )
-- 		return self.endtime != nil
-- 	end,
-- 	--
-- 	-- Returns true if the time has elapsed
-- 	--
-- 	Elapsed = function( self )
-- 		return self.endtime == nil || self.endtime <= CurTime()
-- 	end
-- }
-- T.__index = T
-- --
-- -- Create a new timer object
-- --
-- function util.Timer( startdelay )
-- 	startdelay = startdelay or 0
-- 	local t = {}
-- 	setmetatable( t, T )
-- 	t.endtime = CurTime() + startdelay
-- 	return t
-- end
-- local function PopStack( self, num )
-- 	if ( num == nil ) then
-- 		num = 1
-- 	elseif ( num < 0 ) then
-- 		error( string.format( "attempted to pop %d elements in stack, expected >= 0", num ), 3 )
-- 	else
-- 		num = math.floor( num )
-- 	end
-- 	local len = self[ 0 ]
-- 	if ( num > len ) then
-- 		error( string.format( "attempted to pop %u element%s in stack of length %u", num, num == 1 && "" || "s", len ), 3 )
-- 	end
-- 	return num, len
-- end
-- local STACK =
-- {
-- 	Push = function( self, obj )
-- 		local len = self[ 0 ] + 1
-- 		self[ len ] = obj
-- 		self[ 0 ] = len
-- 	end,
-- 	Pop = function( self, num )
-- 		local len
-- 		num, len = PopStack( self, num )
-- 		if ( num == 0 ) then
-- 			return nil
-- 		end
-- 		local newlen = len - num
-- 		self[ 0 ] = newlen
-- 		newlen = newlen + 1
-- 		local ret = self[ newlen ]
-- 		-- Pop up to the last element
-- 		for i = len, newlen, -1 do
-- 			self[ i ] = nil
-- 		end
-- 		return ret
-- 	end,
-- 	PopMulti = function( self, num )
-- 		local len
-- 		num, len = PopStack( self, num )
-- 		if ( num == 0 ) then
-- 			return {}
-- 		end
-- 		local newlen = len - num
-- 		self[ 0 ] = newlen
-- 		local ret = {}
-- 		local retpos = 0
-- 		-- Pop each element and add it to the table
-- 		-- Iterate in reverse since the stack is internally stored
-- 		-- with 1 being the bottom element and len being the top
-- 		-- But the return will have 1 as the top element
-- 		for i = len, newlen + 1, -1 do
-- 			retpos = retpos + 1
-- 			ret[ retpos ] = self[ i ]
-- 			self[ i ] = nil
-- 		end
-- 		return ret
-- 	end,
-- 	Top = function( self )
-- 		local len = self[ 0 ]
-- 		if ( len == 0 ) then
-- 			return nil
-- 		end
-- 		return self[ len ]
-- 	end,
-- 	Size = function( self )
-- 		return self[ 0 ]
-- 	end
-- }
-- STACK.__index = STACK
-- function util.Stack()
-- 	return setmetatable( { [ 0 ] = 0 }, STACK )
-- end
-- -- Helper for the following functions. This is not ideal but we cannot change this because it will break existing addons.
-- local function GetUniqueID( sid )
-- 	return util.CRC( "gm_" .. sid .. "_gm" )
-- end
-- --[[---------------------------------------------------------
-- 	Name: GetPData( steamid, name, default )
-- 	Desc: Gets the persistant data from a player by steamid
-- -----------------------------------------------------------]]
-- function util.GetPData( steamid, name, default )
-- 	name = Format( "%s[%s]", GetUniqueID( steamid ), name )
-- 	local val = sql.QueryValue( "SELECT value FROM playerpdata WHERE infoid = " .. SQLStr( name ) .. " LIMIT 1" )
-- 	if ( val == nil ) then return default end
-- 	return val
-- end
-- --[[---------------------------------------------------------
-- 	Name: SetPData( steamid, name, value )
-- 	Desc: Sets the persistant data of a player by steamid
-- -----------------------------------------------------------]]
-- function util.SetPData( steamid, name, value )
-- 	name = Format( "%s[%s]", GetUniqueID( steamid ), name )
-- 	sql.Query( "REPLACE INTO playerpdata ( infoid, value ) VALUES ( " .. SQLStr( name ) .. ", " .. SQLStr( value ) .. " )" )
-- end
-- --[[---------------------------------------------------------
-- 	Name: RemovePData( steamid, name )
-- 	Desc: Removes the persistant data from a player by steamid
-- -----------------------------------------------------------]]
-- function util.RemovePData( steamid, name )
-- 	name = Format( "%s[%s]", GetUniqueID( steamid ), name )
-- 	sql.Query( "DELETE FROM playerpdata WHERE infoid = " .. SQLStr( name ) )
-- end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX8652519b41eb41a0be73b0d2ae973706">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">DetectUser</string>
						<string name="ScriptGuid">{0b80bb76-5289-4f18-9d84-59c516f3e491}</string>
						<ProtectedString name="Source"><![CDATA[local regionEnter, regionExit
local module = {Players = {}, Regions = {}}

function module.refreshPlayers(region)
    local inRegion = {}
    for _, obj in pairs(region:GetDescendants()) do
        if obj:IsA("BasePart") then
            for _, part in pairs(obj:GetTouchingParts()) do
                local plr = game.Players:GetPlayerFromCharacter(part.Parent)
                if plr then
                    local plrRegion = module.getPlayerRegion(plr)
                    if not plrRegion or plrRegion == region then
                        inRegion[tostring(plr.UserId)] = true
                    end
                end
            end
        end
    end
    for userId, _ in pairs(inRegion) do
        if module.Players[tostring(userId)] ~= region then
            regionEnter(game.Players:GetPlayerByUserId(userId), region)
            module.Players[tostring(userId)] = region
        end
    end
    for userId, plrRegion in pairs(module.Players) do
        if plrRegion.Name == region.Name and not inRegion[tostring(userId)] then
            regionExit(game.Players:GetPlayerByUserId(userId), plrRegion)
            module.Players[tostring(userId)] = nil
        end
    end
    return inRegion
end

function module.getPlayerRegion(plr)
    for userId, region in pairs(module.Players) do
        if tonumber(userId) == plr.UserId then return region end
    end
    return nil
end

function module.isPlayerInRegion(plr, region)
    if typeof(region) == "string" then
        return module.Players[tostring(plr.UserId)].Name == region
    elseif typeof(region) == "Instance" then
        return module.Players[tostring(plr.UserId)] == region
    end
    return false
end

return function(regions, newRegionEnter, newRegionLeft)
    for _, region in pairs(regions) do
        module.Regions[region.Name] = region
        for _, obj in pairs(region:GetDescendants()) do
            if obj:IsA("BasePart") then
                obj.Touched:Connect(function(hit)
                    module.refreshPlayers(region)
                end)
                obj.TouchEnded:Connect(function(hit)
                    module.refreshPlayers(region)
                end)
            end
        end
    end
    regionEnter = newRegionEnter
    regionExit = newRegionLeft
    return module
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXf319045c06a54d8ab34abb97a5ecfcc7">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">U001GeneralUtils</string>
						<string name="ScriptGuid">{883537c5-0ce6-4add-8f0d-8388164becff}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local Constants = require(Sss.Source.Constants.Constants)
local module = {}
local collectionService = game:GetService("CollectionService")
-- 
-- 

function module.setPropsByTag(props)
    local tag = props.tag
    local theProps = props.props

    local items = collectionService:GetTagged(tag)

    for i, item in ipairs(items) do
        mergeTables(item, theProps)
        -- 
    end

end

function getFirstDescendantByName(parent, name)
    local model = parent:GetDescendants()
    for i = 1, #model do
        if model[i].Name == name then
            return model[i]
            -- 
        end
    end
end

function getDescendantsByName(parent, name)
    local items = parent:GetDescendants()

    local output = {}
    for i, item in ipairs(items) do
        if item.Name == name then
            table.insert(output, item)
            -- 
        end
    end
    return output
end

function module.getDescendantsByType(parent, type)
    local items = parent:GetDescendants()
    local output = {}

    for i, item in pairs(items) do
        if item:IsA(type) then
            table.insert(output, item)
            -- 
        end
    end
    return output
end

-- 
-- 

function hideItem(part, hide)
    local transparency = hide and 1 or 0
    local visible = not hide
    local enabled = not hide

    if part:IsA("BasePart") then part.Transparency = transparency end
    if part:IsA("Decal") then part.Transparency = transparency end

    if part:IsA("ScrollingFrame") then part.Visible = visible end
    if part:IsA("TextLabel") then part.Visible = visible end
    if part:IsA("TextButton") then part.Visible = visible end

    if part:IsA("SurfaceGui") then part.Enabled = enabled end
end

function setChildrenProps(parent, props)
    if parent:IsA("BasePart") then mergeTables(parent, props) end

    local children = parent:GetDescendants()
    for i, item in ipairs(children) do
        if item:IsA("BasePart") then mergeTables(item, props) end
    end
end

function hideItemAndChildren(props)
    local parent = props.item
    local hide = props.hide

    hideItem(parent, hide)
    local children = parent:GetDescendants()
    for i, item in ipairs(children) do hideItem(item, hide) end
end

function sizeWalls(props)
    local parent = props.item
    local height = props.height

    local children = parent:GetDescendants()
    for i, item in ipairs(children) do
        if item:isA("Part") then item.CanCollide = false end
    end
    for i, item in ipairs(children) do
        if item:isA("Part") then
            local posY = item.Position.Y - item.Size.Y / 2
            local newPosY = posY + (height / 2)
            item.Size = Vector3.new(item.Size.X, height, item.Size.Z)
            item.Position = Vector3.new(item.Position.X, newPosY,
                                        item.Position.Z)

        end
    end
    for i, item in ipairs(children) do
        if item:isA("Part") then

            item.CanCollide = true
            item.Anchored = true
        end
    end
end

function sizeWalls2(props)
    local items = props.items
    local height = props.height

    -- local children = parent:GetDescendants()
    for i, item in ipairs(items) do
        if item:isA("Part") then item.CanCollide = false end
    end
    for i, item in ipairs(items) do
        if item:isA("Part") then
            local posY = item.Position.Y - item.Size.Y / 2
            local newPosY = posY + (height / 2)
            item.Size = Vector3.new(item.Size.X, height, item.Size.Z)
            item.Position = Vector3.new(item.Position.X, newPosY,
                                        item.Position.Z)

        end
    end
    for i, item in ipairs(items) do
        if item:isA("Part") then

            item.CanCollide = true
            item.Anchored = true
        end
    end
end

function module.hideItemAndChildrenByName(props)
    local name = props.name
    local hide = props.hide

    local myStuff = workspace:FindFirstChild("MyStuff")
    local item = getFirstDescendantByName(myStuff, name)
    hideItemAndChildren({item = item, hide = hide})
end

function module.setWallHeightByList(props)
    local items = props.items
    local height = props.height

    sizeWalls2({items = items, height = height})

end

function module.setWallHeightbyParentModelName(props)
    local name = props.name
    local height = props.height

    local myStuff = workspace:FindFirstChild("MyStuff")
    -- local item = getFirstDescendantByName(myStuff, name)
    local items = getDescendantsByName(myStuff, name)

    for i, item in ipairs(items) do
        sizeWalls({item = item, height = height})
        -- 
    end
end

function module.setItemAndChildrenPropsByName(myProps)
    local name = myProps.name
    local props = myProps.props

    local myStuff = workspace:FindFirstChild("MyStuff")
    local item = getFirstDescendantByName(myStuff, name)
    setChildrenProps(item, props)
end

function module.setItemAndChildrenPropsByInst(myProps)
    local item = myProps.item
    local props = myProps.props

    setChildrenProps(item, props)
end

function module.getOrCreateFolder(props)
    local name = props.name
    local parent = props.parent

    local runtimeQuestsFolder = getFirstDescendantByName(parent, name)

    if not runtimeQuestsFolder then
        runtimeQuestsFolder = Instance.new("Folder", parent)
        runtimeQuestsFolder.Name = name
        runtimeQuestsFolder = getFirstDescendantByName(parent, name)
    end

    return runtimeQuestsFolder
end

function module.reportPlayerLocation()
    local Players = game:GetService("Players")
    Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function(character)
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            while humanoidRootPart do
                local test2 = workspace.CurrentCamera.CFrame.Position
                print(test2);
                print(player.Name, "is at", tostring(humanoidRootPart.Position))
                wait(4)
            end
        end)
    end)
end

function module.getDecalIdFromName(props)
    local name = props.name
    if (Constants.characters[name] and Constants.characters[name]["decalId"]) then
        return Constants.characters[name]["decalId"]
    else

        if (name ~= "blank" and name ~= "empty" and name ~= "") then
            print("----------------- decalId not found: ------------" .. name)
        end
        return '5999465084'
    end
end

function module.getDisplayNameFromName(props)
    local name = props.name
    if (Constants.characters[name] and Constants.characters[name]["displayName"]) then
        return Constants.characters[name]["displayName"]
    else
        print("---------------------- name not found: ------------" .. name)
        return name
    end
end

function module.deleteChildrenByName(props)
    local parent = props.parent
    local childName = props.childName
    local children = parent:GetDescendants()
    for i, item in pairs(children) do
        if item.Name == childName then
            item:Destroy()
            --
        end
    end
end

function getFromMyStuff(name)
    local myStuff = workspace:FindFirstChild("MyStuff")
    return getFirstDescendantByName(myStuff, name)
end

function module.getFromTemplates(name)
    local myStuff = workspace:FindFirstChild("MyStuff")
    local myTemplates = myStuff:FindFirstChild("MyTemplates")
    return getFirstDescendantByName(myTemplates, name)
end

function module.unAttachAllChildParts(parent)
    local items = parent:GetDescendants()
    local output = {}
    for i = 1, #items do
        if items[i]:IsA('Part') then
            local item = items[i]
            if item.Anchored == true then table.insert(output, item) end
            --
        end

    end
    return output
end

function module.getDescendantsByNameMatch(parent, name)
    local descendants = parent:GetDescendants()
    local output = {}
    for i = 1, #descendants do
        local child = descendants[i]
        local match = string.match(child.Name, name)
        if match then
            table.insert(output, child)
            -- 
        end
    end
    return output
end

function addcfv3(a, b)
    local x, y, z, m11, m12, m13, m21, m22, m23, m31, m32, m33 = a:components()
    return CFrame.new(x + b.x, y + b.y, z + b.z, m11, m12, m13, m21, m22, m23,
                      m31, m32, m33);
end

function cloneModel(props)
    local model = props.model
    local position = props.position
    local suffix = props.suffix

    local modelClone = model:Clone()
    modelClone.Parent = model.Parent
    modelClone.Name = model.Name .. (suffix or "-Clone")
    if (position) then
        modelClone:SetPrimaryPartCFrame(position)
        -- 
    end
    return modelClone
end

local function getNames(tab, name, res, lev)
    res = res or {[tab] = "ROOT"}
    local pls = {}
    lev = lev or 0
    for k, v in pairs(tab) do
        if type(v) == "table" and not res[v] then
            local n = name .. "." .. tostring(k)
            res[v] = n
            pls[v] = n
        end
    end
    for k, v in pairs(pls) do
        getNames(k, v, res)
        pls[k] = lev
    end
    return res, pls
end

function tableToString(tab, a, b, c, d)
    a, b = a or 0, b or {[tab] = true}
    local name = b[tab]
    local white = ("\t"):rep(a + 1)
    if not c then c, d = getNames(tab, "ROOT") end
    local res = {"{"}
    for k, v in pairs(tab) do
        local value
        if type(v) == "table" then
            if d[v] == a and not b[v] then
                b[v] = true
                value = tableToString(v, a + 1, b, c, d)
            else
                value = c[v]
            end
        elseif type(v) == "string" then
            value = '"' .. v:gsub("\n", "\\n"):gsub("\t", "\\t") .. '"'
        else
            value = tostring(v)
        end
        table.insert(res, white .. tostring(k) .. " = " .. value)
    end
    white = white:sub(2)
    table.insert(res, white .. "}")
    return table.concat(res, "\n")
end

local test = {
    str = "Result:\n\t- Unknown",
    number = 12345,
    child = {a = "b"},
    cyclic = {}
}
test.child.cyclic = test.cyclic
test.another = test.child

function mergeTables(t1, t2) for k, v in pairs(t2) do t1[k] = v end end

addPadding = function(props)
    local parent = props.parent
    local paddingPct = props.paddingPct

    local UIPadding = Instance.new("UIPadding", parent)

    UIPadding.PaddingBottom = UDim.new(paddingPct, 0)
    UIPadding.PaddingTop = UDim.new(paddingPct, 0)
    UIPadding.PaddingLeft = UDim.new(paddingPct, 0)
    UIPadding.PaddingRight = UDim.new(paddingPct, 0)
end

setMaterialPebble = function(part)
    part.Material = Enum.Material.Pebble
    part.BrickColor = BrickColor.new("Institutional white")
end

module.addcfv3 = addcfv3
module.addPadding = addPadding
module.cloneModel = cloneModel
module.getFirstDescendantByName = getFirstDescendantByName
module.getFromMyStuff = getFromMyStuff
module.setMaterialPebble = setMaterialPebble
module.tableToString = tableToString
module.hideItemAndChildren = hideItemAndChildren
module.mergeTables = mergeTables
module.getDescendantsByName = getDescendantsByName

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXd75fda56ca8c48d8a5fe5995fd63d53f">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">U002InstanceUtils</string>
						<string name="ScriptGuid">{99a9a030-773f-43b1-ad5d-4356e3ca9b11}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local Constants = require(Sss.Source.Constants.Constants)
local Utils = require(Sss.Source.Utils.U001GeneralUtils)

local module = {}

deleteInstanceByNameStub = function(props)
    local nameStub = props.nameStub
    local parent = props.parent
    local children = parent:GetChildren()

    for _, item in pairs(children) do
        local match = string.match(item.Name, nameStub)

        if item:IsA('Model') and match then
            item:Destroy()
            --
        end
    end
end

module.deleteInstanceByNameStub = deleteInstanceByNameStub

function module.teleportAll(props)
    local destination = props.destination
    local location = Utils.getFirstDescendantByName(workspace, destination)

    for _, plr in pairs(game:GetService("Players"):GetPlayers()) do
        if plr.Character then
            plr.Character.HumanoidRootPart.CFrame = location.CFrame
        end
    end
end

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX8231c818eab4445ebdccdccabbf50569">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">U003PartsUtils</string>
						<string name="ScriptGuid">{f30b496a-ce38-4724-a215-5faf822a9dd4}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local Constants = require(Sss.Source.Constants.Constants)
local module = {}

function module.getCenterPositionForRightOffset(props)
    local parent = props.parent
    local child = props.child

    local newVal = parent.Position.X - (child.Size.X + parent.Size.X) / 2
    return Vector3.new(newVal, child.Position.Y, child.Position.Z)
end

function module.getCenterPositionForRightFront(props)
    local parent = props.parent
    local child = props.child

    local newVal = parent.Position.Z - (child.Size.Z + parent.Size.Z) / 2
    return Vector3.new(child.Position.X, child.Position.Y, newVal)
end

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="Folder" referent="RBXfbe10af566834af8845e069ce069565c">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">TestStuff</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBXd7162b4aa0d548d9b5fc84ee4e742056">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ScrollArea</string>
						<string name="ScriptGuid">{1fd9b811-7d68-4319-87e1-046b1869444c}</string>
						<ProtectedString name="Source"><![CDATA[local module = {}

function hello()

    -- 
end
module.hello = hello
return module

]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="Folder" referent="RBX5b2589189389414dbd069dd116e36488">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">AddDialog</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBXc4555cfbc5f84237a0727e0925ad15dc">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Dialog</string>
						<string name="ScriptGuid">{3e3f8afb-86c2-4325-923e-bc718c61f23f}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local Texts = require(Sss.Source.AddDialog.Texts)

local module = {}

function module.renderDialog(props)
    local dialogConfigs = props.dialogConfigs
    local sgui = props.sgui

    local renderTextsProps = {dialogConfigs = dialogConfigs, sgui = sgui}

    Texts.renderTexts(renderTextsProps)

end

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBXb0666ac9b5944f399d4cab896cd16320">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">QuestConfigs</string>
					<string name="ScriptGuid">{3324090a-4840-4e52-ab82-db793b3f630a}</string>
					<ProtectedString name="Source"><![CDATA[
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX2bc894600b084537a4733835b430cc23">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ScenesConfig</string>
						<string name="ScriptGuid">{1cf96bc6-109f-4769-82d9-fee76157b30f}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local MissyMeow = require(Sss.Source.QuestConfigs.MissyMeow)
local QuestConfigs = require(Sss.Source.QuestConfigs.QuestConfigs)
local module = {}

function module.getScenesConfig()

    -- local missyMeow = MissyMeow.quest
    -- return {missyMeow}

    return QuestConfigs.questConfigs

end

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX74f0ccc331d5420e888c9bb892b2cee9">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">MissyMeow</string>
						<string name="ScriptGuid">{1fd1a183-e952-4f39-829d-9ceae3df2975}</string>
						<ProtectedString name="Source"><![CDATA[local module = {}

module.quest = {
    {
        name = "donutShop01",
        frames = {
            {
                dialogs = {
                    {char = "missyMeow01", text = "Meet me."},
                    {char = "silica01", text = "She's Missy."},
                    {char = "missyMeow01", text = "Call me Missy Meow."},
                    {
                        char = "missyMeow01",
                        text = "If you hit me with a mystery"
                    }, {char = "silica01", text = "She'll figure it out."}
                },
                characters01 = {{name = "missyMeow01"}},
                characters02 = {{name = "silica01"}, {name = "britta01"}}
            }, {
                dialogs = {
                    {char = "britta01", text = "Freezer Fishy?"},
                    {char = "tj001", text = "Missing Muffins?"},
                    {
                        char = "silica01",
                        text = "She can find your kitten cousin"
                    },
                    {char = "silica01", text = "fifteen dozen missing muffins."},
                    {
                        char = "missyMeow01",
                        text = "But I'll need to keep a couple.."
                    },
                    {
                        char = "missyMeow01",
                        text = "...for my cousin ...in case she's coming"
                    }
                },
                characters01 = {{name = "missyMeow01"}},
                characters02 = {
                    {name = "silica01"}, {name = "britta01"}, {name = "tj001"}
                }
            }, {
                dialogs = {
                    {
                        char = "missyMeow01",
                        text = "This is Mitzy, she's my ritzy cousin"
                    }, {char = "mitzyMeow01", text = "They say I'm always"},
                    {char = "mitzyMeow01", text = "scratching, hissing"},
                    {char = "mitzyMeow01", text = "throwing fits, and fussing"},
                    {
                        char = "mitzyMeow01",
                        text = "Okay it's true. But I wish I wasn't!"
                    },
                    {
                        char = "mitzyMeow01",
                        text = "How come all these people push my buttons?"
                    }, {char = "empty", text = ""}, {char = "empty", text = ""},
                    {char = "empty", text = ""}, {char = "empty", text = ""}
                },
                characters01 = {{name = "mitzyMeow01"}, {name = "missyMeow01"}},
                characters02 = {{name = "silica01"}, {name = "britta01"}}
            }, {
                dialogs = {
                    {
                        char = "mitzyMeow01",
                        text = "My dad's always saying to stop screaming"
                    },
                    {char = "mitzyMeow01", text = "Last time we were in Target"},
                    {char = "mitzyMeow01", text = "I latched onto his leg"},
                    {char = "mitzyMeow01", text = "like a lost lemur"}
                },
                characters01 = {{name = "mitzyMeow01"}, {name = "missyMeow01"}},
                characters02 = {{name = "silica01"}, {name = "britta01"}}
            }, {
                dialogs = {
                    {
                        char = "missyMeow01",
                        text = "\"We're not leaving!\", I sob"
                    }, {char = "mitzyMeow01", text = "And I'm heaving"},
                    {char = "mitzyMeow01", text = "And I'm trying to stop him"},
                    {char = "mitzyMeow01", text = "by bobbing and weaving"},
                    {
                        char = "mitzyMeow01",
                        text = "Dad, buy me that barbie!  Stop it! I need it!"
                    }
                },
                characters01 = {{name = "mitzyMeow01"}, {name = "missyMeow01"}},
                characters02 = {{name = "silica01"}, {name = "britta01"}}
            }, {
                dialogs = {
                    {
                        char = "mitzyMeow01",
                        text = "And through the tears, I can see my snot leaving"
                    }, {
                        char = "mitzyMeow01",
                        text = "a giant splotch on his sleeve and it's getting all over"
                    },
                    {
                        char = "mitzyMeow01",
                        text = "the big pink dog I caught and I'm squeezing..."
                    }
                },
                characters01 = {{name = "mitzyMeow01"}, {name = "missyMeow01"}},
                characters02 = {{name = "silica01"}, {name = "britta01"}}
            }, {
                dialogs = {
                    {char = "silica01", text = "He has to buy it now!"},
                    {char = "britta01", text = "The girl's a genius"},
                    {char = "silica01", text = "...my gosh the details..."}
                },
                characters01 = {{name = "mitzyMeow01"}, {name = "missyMeow01"}},
                characters02 = {{name = "silica01"}, {name = "britta01"}}
            }, {
                dialogs = {
                    {char = "britta01", text = "So that's how she got Pinky..."},
                    {char = "silica01", text = "Wowww... Just wow..."},
                    {char = "britta01", text = "I need to write this down."},
                    {char = "britta01", text = "Does someone have a pen?"}
                },
                characters01 = {{name = "mitzyMeow01"}, {name = "missyMeow01"}},
                characters02 = {{name = "silica01"}, {name = "britta01"}}
            }, {
                dialogs = {
                    {char = "silica01", text = "just use the alphabet blocks."},
                    {char = "britta01", text = "Oh right."}, {
                        char = "silica01",
                        text = "But you only need the blocks that spell out CRAZY..."
                    }
                },
                characters01 = {{name = "mitzyMeow01"}, {name = "missyMeow01"}},
                characters02 = {{name = "silica01"}, {name = "britta01"}}
            }, {
                dialogs = {
                    {
                        char = "missyMeow01",
                        text = "My mom says it's all part of my process"
                    },
                    {
                        char = "missyMeow01",
                        text = "When the tears gush out of my eyes"
                    },
                    {
                        char = "mitzyMeow01",
                        text = "Like those old creaky faucets..."
                    },
                    {
                        char = "missyMeow01",
                        text = "You mean in the art room sink?"
                    },
                    {
                        char = "mitzyMeow01",
                        text = "The one that's splattered with cartoon ink."
                    },
                    {
                        char = "britta01",
                        text = "I thought that was Barb's blue drink..."
                    }
                },
                characters01 = {{name = "mitzyMeow01"}, {name = "missyMeow01"}},
                characters02 = {{name = "silica01"}, {name = "britta01"}}
            }, {
                dialogs = {
                    {
                        char = "missyMeow01",
                        text = "My mom says I might grow out of it."
                    },
                    {
                        char = "missyMeow01",
                        text = "So I go in my room and shout a bit."
                    }, {char = "missyMeow01", text = "Then I pout and sit."},
                    {char = "missyMeow01", text = ""}
                },
                characters01 = {{name = "mitzyMeow01"}, {name = "missyMeow01"}},
                characters02 = {{name = "silica01"}, {name = "britta01"}}
            }, {
                dialogs = {
                    {
                        char = "missyMeow01",
                        text = "But I'm like Elsa, my powers keep increasing."
                    },
                    {
                        char = "missyMeow01",
                        text = "This recent weekend I started speaking Swedish"
                    },
                    {
                        char = "missyMeow01",
                        text = "And now my house is freakin freezing."
                    }
                },
                characters01 = {{name = "mitzyMeow01"}, {name = "missyMeow01"}},
                characters02 = {{name = "silica01"}, {name = "britta01"}}
            }
        }
    }, {
        name = "stump",
        frames = {
            {
                dialogs = {
                    {char = "goblinKing01", text = "Hi Will"},
                    {char = "will01", text = "Me not Will!  Me baby troll!"},
                    {char = "goblinKing01", text = "Cool.  What is in the bag?"},
                    {char = "will01", text = "Cup cakes!"},
                    {char = "goblinKing01", text = "I want some!"}
                },
                characters01 = {{name = "goblinKing01"}},
                characters02 = {{name = "will01"}}
            }
        }
    }, {
        name = "tree",
        frames = {
            {
                dialogs = {
                    {char = "raven001", text = "make that face again..."},
                    {char = "britta02", text = "Goo goo gaa gaa!"},
                    {
                        char = "britta03",
                        text = "Oh man, let's go freak some people out!"
                    }
                },
                characters01 = {
                    {name = "raven001"}, {name = "raven002"},
                    {name = "raven003"}, {name = "raven004"}
                },
                characters02 = {
                    {name = "tag"}, {name = "britta03"}, {name = "britta04"},
                    {name = "britta02"}
                }
            }
        }
    }
}

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX648cb04389794f1eb5df3d52d10c7cc3">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">QuestConfigs</string>
						<string name="ScriptGuid">{db21442d-b712-4f21-b7af-85312afd0252}</string>
						<ProtectedString name="Source"><![CDATA[local module = {}

module.questConfigs = {
    {
        questTitle = "News From Suesse Ville",
        startSceneCoords = {row = 0, col = 0},
        endSceneCoords = {row = 0, col = 2},
        sceneConfigs = {
            {
                name = "cap",
                frames = {
                    {
                        dialogs = {
                            {char = "goblinKing01", text = "Tell us the news!"},
                            {char = "will01", text = "Yes the news!"},
                            {char = "angus01", text = "News from Seuss Ville?"}
                        },
                        characters01 = {
                            {name = "snurtch01"}, {name = "will01"},
                            {name = "goblinKing01"}
                        },
                        characters02 = {
                            {name = "looney01"}, {name = "sillyGoose01"},
                            {name = "smallGoose01"}, {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {char = "looney01", text = "I refuse!"},
                            {char = "vesper01", text = "There's new news?"},
                            {char = "looney01", text = "There's NO news!"},
                            {
                                char = "will01",
                                text = "If you wont, then the goose will!"
                            }
                        },
                        characters01 = {
                            {name = "vesper01"}, {name = "will01"},
                            {name = "goblinKing01"}
                        },
                        characters02 = {
                            {name = "looney01"}, {name = "sillyGoose01"},
                            {name = "smallGoose01"}, {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {
                                char = "goblinKing01",
                                text = "Sorry goose, to intrude"
                            },
                            {
                                char = "will01",
                                text = "On your grickle grass gobbling."
                            },
                            {
                                char = "goblinKing01",
                                text = "But gosh, I'm a goblin"
                            },
                            {
                                char = "will01",
                                text = "And something's all wobbling."
                            }
                        },
                        characters01 = {
                            {name = "will01"}, {name = "goblinKing01"}
                        },
                        characters02 = {
                            {name = "sillyGoose01"}, {name = "smallGoose01"},
                            {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {char = "sillyGoose01", text = "I like grass"},
                            {
                                char = "sillyGoose01",
                                text = "Do you guys like grass?"
                            },
                            {
                                char = "empty",
                                text = "We need the new news, Goose!"
                            },
                            {
                                char = "empty",
                                text = "The new news from Seuss Ville!"
                            }
                        },
                        characters01 = {
                            {name = "will01"}, {name = "goblinKing01"}
                        },
                        characters02 = {
                            {name = "sillyGoose01"}, {name = "smallGoose01"},
                            {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {
                                char = "sillyGoose01",
                                text = "Look at this, there is grass..."
                            },
                            {
                                char = "sillyGoose01",
                                text = "...literally  like... ...every where!"
                            }
                        },
                        characters01 = {
                            {name = "will01"}, {name = "goblinKing01"}
                        },
                        characters02 = {
                            {name = "sillyGoose01"}, {name = "smallGoose01"},
                            {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {char = "goblinKing01", text = "Goose..."},
                            {
                                char = "empty",
                                text = "Do not eat this grass over here."
                            },
                            {
                                char = "empty",
                                text = "Did I tell you about the wet grass?"
                            }
                        },
                        characters01 = {
                            {name = "will01"}, {name = "goblinKing01"}
                        },
                        characters02 = {
                            {name = "sillyGoose01"}, {name = "smallGoose01"},
                            {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {char = "goblinKing01", text = "GOOSE!!!"},
                            {
                                char = "empty",
                                text = "Oh hey sorry...  um, what's up."
                            },
                            {
                                char = "empty",
                                text = "Hey do you guys like grass?"
                            }
                        },
                        characters01 = {
                            {name = "will01"}, {name = "goblinKing01"}
                        },
                        characters02 = {
                            {name = "sillyGoose01"}, {name = "smallGoose01"},
                            {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {
                                char = "goblinKing01",
                                text = "Goose, what is the new news from Seuss Ville?"
                            }, {char = "empty", text = "The what what?"},
                            {
                                char = "empty",
                                text = "The new news from Seuss Ville!!!"
                            }, {char = "empty", text = "ummm... ...grass?"}
                        },
                        characters01 = {
                            {name = "will01"}, {name = "goblinKing01"}
                        },
                        characters02 = {
                            {name = "sillyGoose01"}, {name = "smallGoose01"},
                            {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {char = "empty", text = "The thing we practiced!"},
                            {char = "empty", text = "..."},
                            {char = "empty", text = "Oh right!"},
                            {char = "empty", text = "..right right right..."}
                        },
                        characters01 = {
                            {name = "will01"}, {name = "goblinKing01"}
                        },
                        characters02 = {
                            {name = "sillyGoose01"}, {name = "smallGoose01"},
                            {name = "empty"}
                        }
                    }
                },
                coordinates = {row = 0, col = 0},
                showBottomPath = false,
                showRightPath = true,
                showTopPath = false,
                showLeftPath = false,
                isEndScene = false,
                isStartScene = true,
                maxRow = 0,
                maxCol = 0
            }, {
                name = "stump",
                frames = {
                    {
                        dialogs = {
                            {
                                char = "looney01",
                                text = "It was late one dark night"
                            },
                            {
                                char = "looney01",
                                text = "And I slept by the stump."
                            },
                            {
                                char = "looney01",
                                text = "Not a critter was creeping."
                            },
                            {
                                char = "goblinKing01",
                                text = "Not a WHAP, WIMP, or WHUMP?"
                            }
                        },
                        characters01 = {{name = "empty"}, {name = "looney01"}},
                        characters02 = {
                            {name = "goblinKing01"}, {name = "empty"},
                            {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {
                                char = "looney01",
                                text = "When a WHOMP from the woods"
                            },
                            {
                                char = "looney01",
                                text = "Made me leap from my bed"
                            },
                            {
                                char = "goblinKing01",
                                text = "In the cave where you slept?"
                            },
                            {
                                char = "looney01",
                                text = "Where I rested my head."
                            }
                        },
                        characters01 = {{name = "empty"}, {name = "looney01"}},
                        characters02 = {
                            {name = "goblinKing01"}, {name = "empty"},
                            {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {
                                char = "looney01",
                                text = "Two yellow eyes peered in from the dark."
                            },
                            {
                                char = "looney01",
                                text = "\"Um hello... this is my cave!\""
                            },
                            {char = "looney01", text = "I said with some snark"}
                        },
                        characters01 = {{name = "empty"}, {name = "looney01"}},
                        characters02 = {
                            {name = "goblinKing01"}, {name = "empty"},
                            {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {char = "empty", text = "And flipped on the light."},
                            {char = "empty", text = "It was only a shark"},
                            {
                                char = "empty",
                                text = "And alone in the dark with the shark"
                            }, {char = "empty", text = "I remarked="}
                        },
                        characters01 = {{name = "empty"}, {name = "looney01"}},
                        characters02 = {
                            {name = "goblinKing01"}, {name = "empty"},
                            {name = "empty"}
                        }
                    }
                },
                coordinates = {row = 0, col = 1},
                showBottomPath = false,
                showRightPath = true,
                showTopPath = false,
                showLeftPath = true,
                isEndScene = false,
                isStartScene = false,
                maxRow = 0,
                maxCol = 1
            }, {
                name = "goose01",
                frames = {
                    {
                        dialogs = {
                            {char = "goblinKing02", text = "Ah ha ha ha ha ha!"},
                            {
                                char = "slicerDicer01",
                                text = "What's so funny frog boy?"
                            },
                            {
                                char = "goblinKing02",
                                text = "It's your... it's that..."
                            }
                        },
                        characters01 = {
                            {name = "slicerDicer01"}, {name = "trollKing01"}
                        },
                        characters02 = {{name = "hopps01"}, {name = "drake"}}
                    }, {
                        dialogs = {
                            {
                                char = "goblinKing02",
                                text = "...oh my gosh I can't even say it, because I'm laughing so hard."
                            }, {
                                char = "goblinKing02",
                                text = "...it's that puny... light... thingy you are waving at me"
                            }, {char = "slicerDicer01", text = "Ha Ha..."},
                            {
                                char = "slicerDicer01",
                                text = "Laugh it up Lizard Legs!"
                            }, {
                                char = "slicerDicer01",
                                text = "I'm here for the bounty, not for your B roll antics"
                            }
                        },
                        characters01 = {
                            {name = "slicerDicer01"}, {name = "trollKing01"}
                        },
                        characters02 = {{name = "hopps01"}, {name = "drake"}}
                    }, {
                        dialogs = {
                            {
                                char = "goblinKing02",
                                text = "YOUR TOY IS NO MATCH FOR THE TROLL STICK!!!"
                            },
                            {
                                char = "slicerDicer01",
                                text = "Come at me you bog bunny!"
                            },
                            {char = "goblinKing02", text = "Oooooh, spicy..."}
                        },
                        characters01 = {
                            {name = "slicerDicer01"}, {name = "trollKing01"}
                        },
                        characters02 = {{name = "hopps01"}, {name = "drake"}}
                    }, {
                        dialogs = {
                            {
                                char = "hopps01",
                                text = "And all my life, it's all I ever wanted to do..."
                            }, {char = "empty", text = "To be a babysitter?"},
                            {
                                char = "empty",
                                text = "Yeah...   it's like... it's my destiny."
                            },
                            {
                                char = "empty",
                                text = "Wow. Hey, wanna see me spin this green thing around?"
                            }, {char = "empty", text = "Ok."}
                        },
                        characters01 = {
                            {name = "slicerDicer01"}, {name = "trollKing01"}
                        },
                        characters02 = {{name = "hopps01"}, {name = "drake"}}
                    }, {
                        dialogs = {
                            {
                                char = "empty",
                                text = "I wrote a letter to my mom."
                            }, {char = "empty", text = "Can I read it?"},
                            {
                                char = "empty",
                                text = "Sure, here you go. I used my best guess spelling."
                            }
                        },
                        characters01 = {
                            {name = "slicerDicer01"}, {name = "trollKing01"}
                        },
                        characters02 = {{name = "hopps01"}, {name = "drake"}}
                    }, {
                        dialogs = {
                            {char = "empty", text = "DeeR MoM"},
                            {char = "empty", text = "Horse lollipop tuna fish?"},
                            {
                                char = "empty",
                                text = "those are some umm... pretty creative guesses..."
                            }
                        },
                        characters01 = {
                            {name = "slicerDicer01"}, {name = "trollKing01"}
                        },
                        characters02 = {{name = "hopps01"}, {name = "drake"}}
                    }, {
                        dialogs = {
                            {
                                char = "drake",
                                text = "Thanks!  Do you think my mom will understand it?"
                            },
                            {char = "empty", text = "Not in a million years."},
                            {char = "empty", text = "Oh rats..."}
                        },
                        characters01 = {
                            {name = "slicerDicer01"}, {name = "trollKing01"}
                        },
                        characters02 = {{name = "hopps01"}, {name = "drake"}}
                    }, {
                        dialogs = {
                            {
                                char = "goblinKing02",
                                text = "You!  Strange grey boy!  Say that again!"
                            }, {char = "drake", text = "Huh?"},
                            {
                                char = "goblinKing02",
                                text = "That thing you said!  Say it again!"
                            },
                            {char = "drake", text = "Horse lollipop tuna fish?"}
                        },
                        characters01 = {
                            {name = "slicerDicer01"}, {name = "empty"}
                        },
                        characters02 = {
                            {name = "goblinKing02"}, {name = "hopps01"},
                            {name = "drake"}
                        }
                    }, {
                        dialogs = {
                            {
                                char = "empty",
                                text = "That's it.  That's the secret code!"
                            }, {char = "empty", text = "It is real!"}, {
                                char = "empty",
                                text = "When drake was writing his letter, the system saved his password in it's autocomplete index!"
                            }, {
                                char = "empty",
                                text = "Now it just auto-completed the answer to Zorblat's riddle!"
                            },
                            {
                                char = "slicerDicer01",
                                text = "Now, we can finally open the portal!"
                            },
                            {
                                char = "empty",
                                text = "Hey guys!  Watch me spin this green thing around!"
                            }
                        },
                        characters01 = {
                            {name = "slicerDicer01"}, {name = "empty"}
                        },
                        characters02 = {
                            {name = "goblinKing02"}, {name = "hopps01"},
                            {name = "drake"}
                        }
                    }
                },
                coordinates = {row = 0, col = 2},
                showBottomPath = false,
                showRightPath = false,
                showTopPath = false,
                showLeftPath = true,
                isEndScene = true,
                isStartScene = false,
                maxRow = 0,
                maxCol = 2
            }
        },
        gridSize = {rows = 1, cols = 3}
    }, {
        questTitle = "001 - Troll Need Pet",
        startSceneCoords = {row = 0, col = 0},
        endSceneCoords = {col = 2, row = 2},
        sceneConfigs = {
            {
                name = "home",
                frames = {
                    {
                        dialogs = {
                            {char = "troll02", text = "GOLD! GOLD!"},
                            {char = "babyTroll01", text = "Daddy! Daddy!"},
                            {char = "troll02", text = "TROLL NEED GOLD!"},
                            {
                                char = "babyTroll01",
                                text = "Baby Troll want pet!"
                            },
                            {char = "troll02", text = "BABY TROLL WANT PET?"},
                            {char = "babyTroll01", text = "Me want pet!"}
                        },
                        characters01 = {
                            {name = "troll02"}, {name = "babyTroll01"}
                        },
                        characters02 = {{name = "empty"}}
                    }, {
                        dialogs = {
                            {char = "troll02", text = "BABY TROLL GET FROG."},
                            {char = "babyTroll01", text = "Me want dog!"},
                            {char = "troll02", text = "FROG GOOD PET."},
                            {char = "troll02", text = "BABY TROLL GET FROG."}
                        },
                        characters01 = {
                            {name = "troll02"}, {name = "babyTroll01"}
                        },
                        characters02 = {{name = "empty"}}
                    }, {
                        dialogs = {
                            {
                                char = "babyTroll01",
                                text = "Waaaa!  Me want dog!"
                            }, {char = "troll02", text = "FROG GOOD PET."},
                            {char = "babyTroll01", text = "Me want dog!"},
                            {char = "troll02", text = "BABY TROLL GO TO BOG."},
                            {char = "troll02", text = "GET FROG IN BOG."},
                            {char = "babyTroll01", text = "Uuuuugh.... Fine."}
                        },
                        characters01 = {
                            {name = "troll02"}, {name = "babyTroll01"}
                        },
                        characters02 = {{name = "empty"}}
                    }
                },
                coordinates = {row = 0, col = 0},
                showBottomPath = false,
                showRightPath = true,
                showTopPath = false,
                showLeftPath = false,
                isEndScene = false,
                isStartScene = true,
                maxRow = 0,
                maxCol = 0
            }, {
                name = "log",
                frames = {
                    {
                        dialogs = {
                            {char = "babyTroll01", text = "Me find bun!"},
                            {char = "cow01", text = "Moooooo!"},
                            {char = "babyTroll01", text = "Me run with bun!"},
                            {char = "cow01", text = "Moooooo!"},
                            {char = "babyTroll01", text = "Fun Fun Fun!"}
                        },
                        characters01 = {{name = "babyTroll01"}},
                        characters02 = {{name = "bun"}, {name = "cow01"}}
                    }
                },
                coordinates = {row = 0, col = 1},
                showBottomPath = true,
                showRightPath = true,
                showTopPath = false,
                showLeftPath = true,
                isEndScene = false,
                isStartScene = false,
                maxRow = 0,
                maxCol = 1
            }, {
                name = "stump",
                frames = {
                    {
                        dialogs = {
                            {char = "babyTroll01", text = "Run run run!"},
                            {char = "elf", text = "DO NOT GO IN THE CAVE!!!"},
                            {char = "babyTroll01", text = "Fun fun fun!"},
                            {char = "elf", text = "DO NOT GO IN THE CAVE!!!"}
                        },
                        characters01 = {{name = "babyTroll01"}},
                        characters02 = {{name = "elf"}, {name = "dress06"}}
                    }
                },
                coordinates = {row = 0, col = 2},
                showBottomPath = false,
                showRightPath = true,
                showTopPath = false,
                showLeftPath = true,
                isEndScene = false,
                isStartScene = false,
                maxRow = 0,
                maxCol = 2
            }, {
                name = "pond",
                frames = {
                    {
                        dialogs = {
                            {char = "babyTroll01", text = "I see a cub!"},
                            {char = "cub", text = "I need my Mommy!"},
                            {char = "babyTroll01", text = "Me need frog!"},
                            {char = "cub", text = "Mommy!!!"},
                            {char = "babyTroll01", text = "Froggy!!!"}
                        },
                        characters01 = {{name = "babyTroll01"}},
                        characters02 = {{name = "cub"}}
                    }
                },
                coordinates = {col = 3, row = 0},
                showBottomPath = false,
                showRightPath = false,
                showTopPath = false,
                showLeftPath = true,
                isEndScene = false,
                isStartScene = false,
                maxRow = 0,
                maxCol = 3
            }
        },
        gridSize = {rows = 1, cols = 4}
    }, {
        questTitle = "100 - Lucky the Leperchaun",
        startSceneCoords = {row = 0, col = 0},
        sceneConfigs = {
            {
                name = "drip",
                frames = {
                    {
                        dialogs = {
                            {
                                char = "oliveRori01cu",
                                text = "Good afternoon, Leperchaun."
                            },
                            {
                                char = "looney01cu",
                                text = "Good day to you, and please, call me Lucky."
                            }, {char = "babyTroll02", text = "Hi Lucky!"}, {
                                char = "looney01cu",
                                text = "Sadly though, I seem to be at the end of my luck."
                            }
                        },
                        characters01 = {
                            {name = "babyTroll02"}, {name = "oliveRori01cu"}
                        },
                        characters02 = {{name = "looney01cu"}}
                    }, {
                        dialogs = {
                            {char = "babyTroll02", text = "Oh no!"}, {
                                char = "oliveRori01",
                                text = "I'm not quick to trust a leperchaun with a hard luck story."
                            },
                            {
                                char = "oliveRori01",
                                text = "Tell us your game Lucky, or be off with you."
                            },
                            {
                                char = "babyTroll02",
                                text = "I thought all you Leperchauns were lucky..."
                            }
                        },
                        characters01 = {
                            {name = "babyTroll02"}, {name = "oliveRori01"}
                        },
                        characters02 = {{name = "looney01cu"}}
                    }, {
                        dialogs = {
                            {
                                char = "looney01cu",
                                text = "Ah, run along then, you young folk don't want to hear some old Leperchaun"
                            },
                            {
                                char = "looney01cu",
                                text = "croak on about old riddles and buried treasure."
                            }, {char = "oliveRori01", text = "old riddles...?"},
                            {
                                char = "looney01cu",
                                text = "You'd probably just laugh at me like all the rest."
                            },
                            {
                                char = "babyTroll02",
                                text = "...buried treasure!?"
                            }
                        },
                        characters01 = {
                            {name = "babyTroll02"}, {name = "oliveRori01"}
                        },
                        characters02 = {{name = "looney01cu"}}
                    }, {
                        dialogs = {
                            {
                                char = "oliveRori01",
                                text = "Share your riddle with us Lucky, and we shall put our heads together and solve it."
                            }, {
                                char = "looney01cu",
                                text = "Well the riddle itself, is a simple one.  But it forms the heart of a tale"
                            }, {
                                char = "babyTroll02",
                                text = "So delightful, yet so dreadful, that I must share with you its back story"
                            }
                        },
                        characters01 = {
                            {name = "babyTroll02"}, {name = "oliveRori01"}
                        },
                        characters02 = {{name = "looney01cu"}}
                    }, {
                        dialogs = {
                            {
                                char = "looney01cu",
                                text = "So that you then may understand what power the riddle keeps so tightly bound."
                            },
                            {
                                char = "looney01cu",
                                text = "<Lucky tells them the backstory>"
                            }, {
                                char = "looney01cu",
                                text = "\"What is as tall as a house, round as a cup, and all the Queen's kittens can't drink it up?\""
                            },
                            {
                                char = "babyTroll02",
                                text = "Oh no, not this old legend again..."
                            }
                        },
                        characters01 = {
                            {name = "babyTroll02"}, {name = "oliveRori01"}
                        },
                        characters02 = {{name = "looney01cu"}}
                    }, {
                        dialogs = {
                            {
                                char = "oliveRori01",
                                text = "Are the last 3 dragon eggs are locked in the caves under Mount Dracmore?"
                            }, {
                                char = "oliveRori01",
                                text = "...and only someone wearing the magic ring can open the door?"
                            },
                            {
                                char = "looney01cu",
                                text = "Well not just any magic ring."
                            },
                            {char = "babyTroll02", text = "The Magic Ring..."},
                            {
                                char = "looney01cu",
                                text = "...drum roll please..."
                            }, {char = "looney01cu", text = "...of Andakar!"}, {
                                char = "babyTroll02",
                                text = "The kindergarteners do a play about it every fall."
                            }
                        },
                        characters01 = {
                            {name = "babyTroll02"}, {name = "oliveRori01"}
                        },
                        characters02 = {{name = "looney01cu"}}
                    }, {
                        dialogs = {
                            {
                                char = "oliveRori01",
                                text = "tall as a house, round as a cup, and all the Queen's kittens can't pull it up..."
                            },
                            {
                                char = "babyTroll02",
                                text = "We all know the answer is a well."
                            }, {
                                char = "looney01cu",
                                text = "This exact plot was on Magic Seahorse Friends S3E5.'"
                            }, {char = "looney01cu", text = "Impossible."},
                            {
                                char = "babyTroll02",
                                text = "She's seen like every show on Bugflix..."
                            }
                        },
                        characters01 = {
                            {name = "babyTroll02"}, {name = "oliveRori01"}
                        },
                        characters02 = {{name = "looney01cu"}}
                    }, {
                        dialogs = {
                            {
                                char = "babyTroll02",
                                text = "We all know that story is make believe."
                            }, {
                                char = "oliveRori01",
                                text = "Our dads went searching for the ring in that well, when they were kids."
                            },
                            {
                                char = "babyTroll02",
                                text = "Kids have searched that well for 25 years..."
                            },
                            {
                                char = "oliveRori01",
                                text = "...and no one has found the ring."
                            },
                            {
                                char = "looney01cu",
                                text = "Well that's because the ring isn't in the well."
                            }, {char = "empty", text = "Huh?"}
                        },
                        characters01 = {
                            {name = "babyTroll02"}, {name = "oliveRori01"}
                        },
                        characters02 = {{name = "looney01cu"}}
                    }, {
                        dialogs = {
                            {
                                char = "looney01cu",
                                text = "When my grandmother was 6, she used to pick apples in troll valley."
                            }, {
                                char = "looney01cu",
                                text = "The trolls tell the same legend we do, but the songs are different, and the riddle is different too."
                            },
                            {
                                char = "looney01cu",
                                text = "This is the real riddle, the troll riddle..."
                            }, {
                                char = "looney01cu",
                                text = "What is as tall as a horse, brown as a pup, run kitten run, you have woken the cub."
                            }
                        },
                        characters01 = {
                            {name = "babyTroll02"}, {name = "oliveRori01"}
                        },
                        characters02 = {{name = "looney01cu"}}
                    }, {
                        dialogs = {
                            {
                                char = "babyTroll02",
                                text = "Your grandma must have used best guess spelling when she wrote it down!"
                            },
                            {
                                char = "oliveRori01",
                                text = "you have woken the cub...?"
                            },
                            {
                                char = "babyTroll02",
                                text = "That can only mean one thing!"
                            },
                            {
                                char = "oliveRori01",
                                text = "The Ring of Andakar is in Grizzly Cave!"
                            }
                        },
                        characters01 = {
                            {name = "babyTroll02"}, {name = "oliveRori01"}
                        },
                        characters02 = {{name = "looney01cu"}}
                    }, {
                        dialogs = {
                            {
                                char = "babyTroll02",
                                text = "There's no time to lose."
                            }, {
                                char = "looney01cu",
                                text = "We need to get in the cave before the bears come home to hibernight."
                            },
                            {
                                char = "babyTroll02",
                                text = "That's tonite at mid-nite!"
                            }, {
                                char = "oliveRori01",
                                text = "Well Lucky, I'm sorry to say that I do not believe your tale."
                            }
                        },
                        characters01 = {
                            {name = "babyTroll02"}, {name = "oliveRori01"}
                        },
                        characters02 = {{name = "looney01cu"}}
                    }, {
                        dialogs = {
                            {
                                char = "oliveRori01",
                                text = "Your fingernails tell me you are a Digging Troll from the North"
                            }, {
                                char = "oliveRori01",
                                text = "...yet your hat band is duck reed, so you must sell goods in the city."
                            }, {
                                char = "oliveRori01",
                                text = "You are walking on the road north out of Turnip Town, with no bed roll on your back"
                            },
                            {
                                char = "oliveRori01",
                                text = "...and your shoes have fresh soles"
                            }
                        },
                        characters01 = {
                            {name = "babyTroll02"}, {name = "oliveRori01"}
                        },
                        characters02 = {{name = "looney01cu"}}
                    }, {
                        dialogs = {
                            {
                                char = "oliveRori01",
                                text = "I will guess that you have a long journey planned, but you are making a quick trip to the village to see your mum."
                            },
                            {
                                char = "oliveRori01",
                                text = "How am I doing so far?"
                            },
                            {
                                char = "looney01cu",
                                text = "Fie!  And fiddle sticks!"
                            }, {
                                char = "oliveRori01",
                                text = "And your only interest in us is to swindle a ride across the Black Sands, with your musty riddles and tall tales."
                            }, {char = "looney01cu", text = "Balderdash!"}
                        },
                        characters01 = {
                            {name = "babyTroll02"}, {name = "oliveRori01"}
                        },
                        characters02 = {{name = "looney01cu"}}
                    }, {
                        dialogs = {
                            {
                                char = "oliveRori01",
                                text = "Our own adventure awaits, but I shall offer you some free advice Lucky."
                            }, {
                                char = "oliveRori01",
                                text = "Refrain from any Troll Tricking while you are in the valley."
                            }, {
                                char = "oliveRori01",
                                text = "These trolls are proud and you may wind up floating in a stew pot covered in fresh scallions."
                            }, {char = "empty", text = "-----------"},
                            {char = "empty", text = "-----------"},
                            {char = "empty", text = "-----------"},
                            {char = "empty", text = "-----------"},
                            {char = "empty", text = "-----------"}
                        },
                        characters01 = {
                            {name = "babyTroll02"}, {name = "oliveRori01"}
                        },
                        characters02 = {{name = "looney01cu"}}
                    }
                },
                coordinates = {row = 0, col = 0},
                showBottomPath = false,
                showRightPath = false,
                showTopPath = false,
                showLeftPath = false,
                isEndScene = false,
                isStartScene = true,
                maxRow = 0,
                maxCol = 0
            }
        },
        gridSize = {rows = 1, cols = 1}
    }, {
        questTitle = "105 - Hey look! Grass!",
        startSceneCoords = {col = 0, row = 0},
        endSceneCoords = {col = 3, row = 0},
        sceneConfigs = {
            {
                name = "hill",
                frames = {
                    {
                        dialogs = {
                            {char = "sillyGoose01", text = "Oh wow!"},
                            {char = "cow01", text = "Mooo!  Mooo!"},
                            {char = "sillyGoose01", text = "Hold on a sec..."},
                            {char = "cow01", text = "Yuuuummm!"},
                            {char = "sillyGoose01", text = "This is..."},
                            {
                                char = "sillyGoose01",
                                text = "This is... grass..."
                            }
                        },
                        characters01 = {{name = "sillyGoose01"}},
                        characters02 = {{name = "cow01"}}
                    }, {
                        dialogs = {
                            {char = "sillyGoose01", text = "I love grass!"},
                            {char = "cow01", text = "Me too!"},
                            {char = "sillyGoose01", text = "Grass is the best!"},
                            {char = "cow01", text = "Buuuurrrp!"},
                            {char = "sillyGoose01", text = "I just..."},
                            {
                                char = "sillyGoose01",
                                text = "I just... love grass!"
                            }
                        },
                        characters01 = {{name = "sillyGoose01"}},
                        characters02 = {{name = "cow01"}}
                    }, {
                        dialogs = {
                            {
                                char = "littleGoose",
                                text = "Mom, mom!  Can we eat grass?"
                            },
                            {char = "queenGoose01", text = "Oh! No no no no!"},
                            {
                                char = "queenGoose01",
                                text = "We do not eat grass!"
                            },
                            {
                                char = "littleGoose",
                                text = "But moooooooommmmm!!!"
                            },
                            {
                                char = "littleGoose",
                                text = "I want to eat grass!"
                            },
                            {
                                char = "queenGoose01",
                                text = "You are not a grass goose."
                            }
                        },
                        characters01 = {{name = "sillyGoose01"}},
                        characters02 = {
                            {name = "littleGoose"}, {name = "queenGoose01"}
                        }
                    }, {
                        dialogs = {
                            {
                                char = "littleGoose",
                                text = "But that goose eats grass..."
                            }, {
                                char = "queenGoose01",
                                text = "Do not look at that silly goose, you silly goose!"
                            },
                            {char = "queenGoose01", text = "Eat your worms."},
                            {
                                char = "littleGoose",
                                text = "I do not like worms."
                            }
                        },
                        characters01 = {{name = "sillyGoose01"}},
                        characters02 = {
                            {name = "littleGoose"}, {name = "queenGoose01"}
                        }
                    }, {
                        dialogs = {
                            {
                                char = "queenGoose01",
                                text = "Fine.  Go eat grass."
                            }, {char = "littleGoose", text = "Yay!"}
                        },
                        characters01 = {{name = "sillyGoose01"}},
                        characters02 = {
                            {name = "littleGoose"}, {name = "queenGoose01"}
                        }
                    }
                },
                coordinates = {col = 0, row = 0},
                showBottomPath = false,
                showRightPath = true,
                showTopPath = false,
                showLeftPath = false,
                isEndScene = false,
                isStartScene = true,
                maxRow = 0,
                maxCol = 0
            }, {
                name = "stump",
                frames = {
                    {
                        dialogs = {
                            {char = "littleGoose", text = "I like grass too!"},
                            {
                                char = "sillyGoose01",
                                text = "Wait, you like grass?"
                            }, {char = "littleGoose", text = "I love grass!"},
                            {char = "sillyGoose01", text = "Me too!"},
                            {
                                char = "littleGoose",
                                text = "And mom says I can eat it!"
                            }, {char = "sillyGoose01", text = "Me too!"}
                        },
                        characters01 = {
                            {name = "sillyGoose01"}, {name = "littleGoose"}
                        },
                        characters02 = {{name = "empty"}}
                    }, {
                        dialogs = {
                            {char = "littleGoose", text = "This grass is wet."},
                            {char = "sillyGoose01", text = "That grass is wet?"},
                            {char = "littleGoose", text = "Yes, it is all wet."},
                            {
                                char = "sillyGoose01",
                                text = "Stop.  Do not eat the wet grass!"
                            }
                        },
                        characters01 = {
                            {name = "sillyGoose01"}, {name = "littleGoose"}
                        },
                        characters02 = {{name = "empty"}}
                    }, {
                        dialogs = {
                            {char = "littleGoose", text = "Why not?"},
                            {
                                char = "sillyGoose01",
                                text = "I went pee pee on that grass."
                            }, {char = "littleGoose", text = "Um gross..."},
                            {
                                char = "sillyGoose01",
                                text = "Yes.  I just... I just kinda had to go."
                            }
                        },
                        characters01 = {
                            {name = "sillyGoose01"}, {name = "littleGoose"}
                        },
                        characters02 = {{name = "empty"}}
                    }, {
                        dialogs = {
                            {
                                char = "littleGoose",
                                text = "Yuck.  Maybe say that at the start next time.."
                            },
                            {
                                char = "sillyGoose01",
                                text = "Yes.  Right. Good idea."
                            },
                            {
                                char = "littleGoose",
                                text = "Did you go pee pee anywhere else?"
                            },
                            {
                                char = "sillyGoose01",
                                text = "Well, now that I think about it, I go pee..."
                            },
                            {
                                char = "sillyGoose01",
                                text = "um.... kinda every where...."
                            }
                        },
                        characters01 = {
                            {name = "sillyGoose01"}, {name = "littleGoose"}
                        },
                        characters02 = {{name = "empty"}}
                    }, {
                        dialogs = {
                            {char = "littleGoose", text = "Wow... and gross."},
                            {
                                char = "sillyGoose01",
                                text = "Yeah... like... every day..."
                            }, {char = "littleGoose", text = "<gasp>"},
                            {char = "sillyGoose01", text = "...all day long..."}
                        },
                        characters01 = {
                            {name = "sillyGoose01"}, {name = "littleGoose"}
                        },
                        characters02 = {{name = "empty"}}
                    }, {
                        dialogs = {
                            {
                                char = "littleGoose",
                                text = "Let's pretend we never talked about this."
                            }, {char = "sillyGoose01", text = "Good idea."},
                            {char = "littleGoose", text = "I love grass!"},
                            {char = "sillyGoose01", text = "Me too!"}
                        },
                        characters01 = {
                            {name = "sillyGoose01"}, {name = "littleGoose"}
                        },
                        characters02 = {{name = "empty"}}
                    }, {
                        dialogs = {
                            {
                                char = "littleGoose",
                                text = "Want to go look for baby troll?"
                            }, {char = "sillyGoose01", text = "Ok."},
                            {
                                char = "littleGoose",
                                text = "He lives in the bog."
                            }, {char = "sillyGoose01", text = "I love the bog!"}
                        },
                        characters01 = {
                            {name = "sillyGoose01"}, {name = "littleGoose"}
                        },
                        characters02 = {{name = "empty"}}
                    }
                },
                coordinates = {row = 0, col = 1},
                showBottomPath = false,
                showRightPath = true,
                showTopPath = false,
                showLeftPath = true,
                isEndScene = false,
                isStartScene = false,
                maxRow = 0,
                maxCol = 1
            }, {
                name = "bog",
                frames = {
                    {
                        dialogs = {
                            {char = "littleGoose", text = "I see a bug..."},
                            {
                                char = "sillyGoose01",
                                text = "I see a bug... in a bog!"
                            }, {char = "littleGoose", text = "A big bug?"},
                            {char = "sillyGoose01", text = "A bog bug."}
                        },
                        characters01 = {
                            {name = "sillyGoose01"}, {name = "littleGoose"}
                        },
                        characters02 = {{name = "bug"}}
                    }, {
                        dialogs = {
                            {
                                char = "littleGoose",
                                text = "Put the bog bug in the big bag!"
                            }, {char = "sillyGoose01", text = "Ok."}
                        },
                        characters01 = {
                            {name = "sillyGoose01"}, {name = "littleGoose"}
                        },
                        characters02 = {{name = "bug"}}
                    }
                },
                coordinates = {col = 2, row = 0},
                showBottomPath = false,
                showRightPath = true,
                showTopPath = false,
                showLeftPath = true,
                isEndScene = false,
                isStartScene = false,
                maxRow = 0,
                maxCol = 2
            }, {
                name = "log",
                frames = {
                    {
                        dialogs = {
                            {char = "sillyGoose01", text = "I see a dog..."},
                            {
                                char = "littleGoose",
                                text = "I see a dog... on a log..."
                            },
                            {char = "sillyGoose01", text = "Hi little doggy."},
                            {char = "littleGoose", text = "Are you lost?"},
                            {char = "angus01", text = "bark! bark!"}
                        },
                        characters01 = {
                            {name = "sillyGoose01"}, {name = "littleGoose"}
                        },
                        characters02 = {{name = "angus01"}}
                    }, {
                        dialogs = {
                            {
                                char = "littleGoose",
                                text = "Little doggy, you can play with us."
                            }, {char = "angus01", text = "Ruff Ruff!"},
                            {char = "angus01", text = "Me want mommy!"},
                            {
                                char = "sillyGoose01",
                                text = "We will find your mommy!"
                            }
                        },
                        characters01 = {
                            {name = "sillyGoose01"}, {name = "littleGoose"}
                        },
                        characters02 = {{name = "angus01"}}
                    }
                },
                coordinates = {col = 3, row = 0},
                showBottomPath = false,
                showRightPath = false,
                showTopPath = false,
                showLeftPath = true,
                isEndScene = true,
                isStartScene = false,
                maxRow = 0,
                maxCol = 3
            }
        },
        gridSize = {rows = 1, cols = 4}
    }, {
        questTitle = "The Boys from Connecticut - part 01",
        startSceneCoords = {row = 0, col = 0},
        endSceneCoords = {col = 3, row = 0},
        sceneConfigs = {
            {
                name = "mop",
                frames = {
                    {
                        dialogs = {
                            {
                                char = "lucky",
                                text = "And once I deliver this 4 leaf clover to my Grand Mama..."
                            },
                            {
                                char = "lucky",
                                text = "She will tell me the answer to elf's riddle."
                            },
                            {
                                char = "lucky",
                                text = "And you and I can unlock the treasure chest..."
                            }, {char = "cow01", text = "Mooo."}, {
                                char = "lucky",
                                text = "But alas... I need just one more gold to pay for the journey..."
                            }
                        },
                        characters01 = {},
                        characters02 = {
                            {name = "lucky"}, {name = "cow01"},
                            {name = "chick01"}
                        }
                    }, {
                        dialogs = {
                            {char = "goat01", text = "Baaaaa..."},
                            {char = "lucky", text = "Oh my poor Grand Mama..."},
                            {char = "cow01", text = "Baaaa."},
                            {
                                char = "lucky",
                                text = "My poor, old Grand Mama..."
                            }
                        },
                        characters01 = {},
                        characters02 = {
                            {name = "lucky"}, {name = "cow01"},
                            {name = "goat01"}
                        }
                    }, {
                        dialogs = {
                            {
                                char = "cow01",
                                text = "Listen! What is this I hear?"
                            },
                            {
                                char = "lucky",
                                text = "Did I just hear a... ... a giggle?"
                            }, {char = "cow01", text = "Moooo..."},
                            {char = "chick01", text = "Peep. Peep."}
                        },
                        characters01 = {},
                        characters02 = {
                            {name = "lucky"}, {name = "cow01"},
                            {name = "chick01"}
                        }
                    }, {
                        dialogs = {
                            {char = "lucky", text = "Why yes.  Yes inded!"},
                            {
                                char = "lucky",
                                text = "Lady Luck has smiled upon us!"
                            }, {char = "cow01", text = "Moooo..."},
                            {
                                char = "lucky",
                                text = "and sent us a whole platter of fresh..."
                            }
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "lucky"}, {name = "cow01"}}
                    }, {
                        dialogs = {
                            {char = "luke01", text = "Where are we?"},
                            {char = "hudson01", text = "I have no idea."},
                            {
                                char = "hudson01",
                                text = "Mom said this was a game..."
                            }, {char = "luke01", text = "Nope..."},
                            {
                                char = "lucky",
                                text = "a whole platter of fresh...  ...faces!"
                            }
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "lucky"}, {name = "cow01"}}
                    }, {
                        dialogs = {
                            {char = "lucky01", text = "Well hello lads..."},
                            {
                                char = "hudson01",
                                text = "We are from Connecticut."
                            },
                            {
                                char = "lucky01",
                                text = "Hello Boys from Connecticut."
                            },
                            {
                                char = "lucky01",
                                text = "What brightly colored tunics you wear."
                            }
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "lucky01"}, {name = "cow01"}}
                    }, {
                        dialogs = {
                            {
                                char = "luke01",
                                text = "Our mom bought them for us."
                            },
                            {
                                char = "lucky01",
                                text = "I can see your mom has excellent taste."
                            }, {
                                char = "lucky01",
                                text = "Does every child in Connecticut have a shirt like that?"
                            }, {char = "hudson01", text = "I think so."},
                            {
                                char = "lucky01",
                                text = "Well, perhaps you could lend it to me one day."
                            }, {
                                char = "lucky01",
                                text = "I could use it to scare the chickens out of my pea patch."
                            }
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "lucky01"}, {name = "cow01"}}
                    }, {
                        dialogs = {
                            {char = "hudson01", text = "You have a pea patch?"},
                            {char = "luke01", text = "Cool!"}
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "lucky01"}, {name = "cow01"}}
                    }, {
                        dialogs = {
                            {
                                char = "lucky01",
                                text = "Forgive my manners, let me introduce myself."
                            },
                            {
                                char = "lucky01",
                                text = "My friends call me Lucky."
                            },
                            {
                                char = "hudson01",
                                text = "Our mom is making us do this."
                            },
                            {
                                char = "lucky01",
                                text = "But alas, my Luck seems to have run out"
                            },
                            {char = "luke01", text = "Can we play MineCraft?"}
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "lucky01"}, {name = "cow01"}}
                    }, {
                        dialogs = {
                            {char = "lucky01", text = "Mine Craft?"},
                            {char = "lucky01", text = "Pish-Posh."},
                            {char = "lucky01", text = "Be off with you then."},
                            {
                                char = "lucky01",
                                text = "Go play your video games."
                            }, {
                                char = "lucky01",
                                text = "You don't look like the sort of fellows who would be interested in old riddles and buried treasure."
                            }, {
                                char = "lucky01",
                                text = "You would probably just laugh at me like all the rest..."
                            }
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "lucky01"}, {name = "cow01"}}
                    }, {
                        dialogs = {
                            {char = "luke01", text = "I like riddles!"},
                            {char = "hudson01", text = "Buried treasure?"}, {
                                char = "lucky01",
                                text = "Besides, I must be off now, I need to get to the Rap Battle..."
                            }, {char = "luke01", text = "Rap Battle?"}
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "lucky01"}, {name = "cow01"}}
                    }, {
                        dialogs = {
                            {
                                char = "luke01",
                                text = "Tell us your riddle Lucky!"
                            }, {
                                char = "lucky01",
                                text = "Ah, perhaps you boys are more clever than you look..."
                            },
                            {
                                char = "lucky01",
                                text = "Quickly then, and lean in close!"
                            }, {
                                char = "lucky01",
                                text = "If one of the Trolls hears the riddle, they will dig it up themselves."
                            },
                            {
                                char = "cow01",
                                text = "<cut to Troll Tricker quest>"
                            }
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "lucky01"}, {name = "cow01"}}
                    }
                },
                coordinates = {row = 0, col = 0},
                showBottomPath = false,
                showRightPath = true,
                showTopPath = false,
                showLeftPath = false,
                isEndScene = false,
                isStartScene = true,
                maxRow = 0,
                maxCol = 0
            }, {
                name = "mat",
                frames = {
                    {
                        dialogs = {
                            {char = "trollKing01", text = "I am Troll King!"},
                            {char = "trollKing01", text = "Who goes there?"},
                            {char = "luke01", text = "I'm Luke."},
                            {char = "hudson01", text = "I'm Hudson."}
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "trollKing01"}, {name = "bun"}}
                    }, {
                        dialogs = {
                            {
                                char = "trollKing01",
                                text = "What fancy shirts Luke and Hudson..."
                            },
                            {char = "luke01", text = "We are from Connecticut."},
                            {
                                char = "trollKing01",
                                text = "Have you come to steal my Jam?"
                            }, {char = "hudson01", text = "No."},
                            {char = "luke01", text = "Maybe..."}
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "trollKing01"}}
                    }, {
                        dialogs = {
                            {
                                char = "trollKing01",
                                text = "Or are you here to do the Zam???"
                            }, {char = "hudson01", text = "Neither"},
                            {char = "luke01", text = "Both."},
                            {char = "luke01", text = "What's the Zam?"}, {
                                char = "trollKing01",
                                text = "Hold on.  Let me take this thing off... Someone start the music..."
                            }
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "trollKing01"}}
                    }, {
                        dialogs = {
                            {char = "luke01", text = "What's the Zam?"},
                            {
                                char = "trollKing",
                                text = "The Zam is the dance you do"
                            },
                            {
                                char = "trollKing",
                                text = "If you're a fancy dude"
                            },
                            {
                                char = "fancyDudeFromFrance01",
                                text = "from France"
                            }, {char = "trollKing", text = "and you"},
                            {char = "trollKing", text = "just got"},
                            {char = "trollKing", text = "jam on your hands"},
                            {
                                char = "trollKing",
                                text = "But you gotta go dance"
                            },
                            {
                                char = "trollKing",
                                text = "So you flap em in the air"
                            },
                            {
                                char = "fancyDudeFromFrance01",
                                text = "Like a couple of fans"
                            },
                            {
                                char = "trollKing",
                                text = "That are covered with ants!"
                            }
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {
                            {name = "trollKing"},
                            {name = "fancyDudeFromFrance01"}
                        }
                    }, {
                        dialogs = {
                            {char = "hudson01", text = "We like the Zam man..."},
                            {char = "luke01", text = "But we need to scram!"},
                            {char = "trollKing", text = "Can I come with you?"}
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {
                            {name = "trollKing"},
                            {name = "fancyDudeFromFrance01"}
                        }
                    }
                },
                coordinates = {row = 0, col = 1},
                showBottomPath = false,
                showRightPath = true,
                showTopPath = false,
                showLeftPath = true,
                isEndScene = false,
                isStartScene = false,
                maxRow = 0,
                maxCol = 1
            }, {
                name = "cap",
                frames = {
                    {
                        dialogs = {
                            {
                                char = "britta01",
                                text = "Wow.  Are those space shirts?"
                            },
                            {char = "hudson01", text = "Our mom bought them."},
                            {char = "britta01", text = "Your mom is cool!"},
                            {
                                char = "luke01",
                                text = "Are you Sid the Science Kid?"
                            }, {char = "britta01", text = "No."}
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "britta01"}, {name = "raven05"}}
                    }, {
                        dialogs = {
                            {
                                char = "hudson01",
                                text = "How do we get out of here?"
                            }, {char = "britta01", text = "Ha!"},
                            {char = "britta01", text = "Good question."},
                            {
                                char = "britta01",
                                text = "There is only one way out."
                            }, {char = "hudson01", text = "We'll take it!"},
                            {char = "luke01", text = "Are you Dora?"}
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "britta01"}}
                    }, {
                        dialogs = {
                            {
                                char = "britta01",
                                text = "You need to go through Mount Dracmore."
                            }, {char = "hudson01", text = "ok..."},
                            {
                                char = "britta01",
                                text = "But first, you need to bring the bun to the pan."
                            },
                            {
                                char = "luke01",
                                text = "What are you talking about?"
                            }
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "britta01"}}
                    }, {
                        dialogs = {
                            {char = "britta01", text = "Did you get the bun?"},
                            {char = "luke01", text = "What?"},
                            {char = "hudson01", text = "Are you talking to us?"},
                            {
                                char = "britta01",
                                text = "Did you see this sign that said= \"You got the bun\"?"
                            }, {char = "hudson01", text = "No."}
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "britta01"}}
                    }, {
                        dialogs = {
                            {
                                char = "britta01",
                                text = "Never mind.  It's not important."
                            },
                            {char = "britta01", text = "Just go to the pan."},
                            {char = "britta01", text = "You will earn 5 gold."}
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "britta01"}}
                    }, {
                        dialogs = {
                            {
                                char = "hudson01",
                                text = "We can give one gold to the Leprechaun."
                            }, {char = "britta01", text = "What? No, no no!"},
                            {
                                char = "britta01",
                                text = "Never give the Leprechaun any gold, ever!"
                            },
                            {
                                char = "hudson01",
                                text = "But, his Grand Ma-Ma..."
                            },
                            {
                                char = "britta01",
                                text = "Don't even talk to him."
                            }, {char = "luke01", text = "I like him..."}
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "britta01"}}
                    }, {
                        dialogs = {
                            {char = "hudson01", text = "How do we get home?"},
                            {
                                char = "luke01",
                                text = "Our mom said this was a game."
                            },
                            {
                                char = "britta01",
                                text = "Look, I am on a dress quest."
                            },
                            {
                                char = "britta01",
                                text = "I can help you.  Meet me at the pig in the wig."
                            },
                            {
                                char = "britta01",
                                text = "But you have to bring Hopps!"
                            }
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "britta01"}}
                    }
                },
                coordinates = {col = 2, row = 0},
                showBottomPath = false,
                showRightPath = true,
                showTopPath = false,
                showLeftPath = true,
                isEndScene = false,
                isStartScene = false,
                maxRow = 0,
                maxCol = 2
            }, {
                name = "pan",
                frames = {
                    {
                        dialogs = {
                            {char = "elf", text = "DO NOT GO IN THE CAVE!!!"},
                            {
                                char = "luke01",
                                text = "Are you a licensed character?"
                            },
                            {
                                char = "elf",
                                text = "Huh? What?  Look, a giant monster!"
                            }
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "elf"}}
                    }, {
                        dialogs = {
                            {char = "elf", text = "DO NOT GO IN THE CAVE!!!"},
                            {char = "luke01", text = "Let's go in the cave."},
                            {char = "hudson01", text = "No way!"},
                            {
                                char = "luke01",
                                text = "I'm going to the rap battle!"
                            }
                        },
                        characters01 = {{name = "luke01"}, {name = "hudson01"}},
                        characters02 = {{name = "elf"}}
                    }
                },
                coordinates = {col = 3, row = 0},
                showBottomPath = false,
                showRightPath = false,
                showTopPath = false,
                showLeftPath = true,
                isEndScene = true,
                isStartScene = false,
                maxRow = 0,
                maxCol = 3
            }
        },
        gridSize = {rows = 1, cols = 4}
    }, {
        questTitle = "The Bad Baby Sitter",
        startSceneCoords = {row = 0, col = 0},
        sceneConfigs = {
            {
                name = "home",
                frames = {
                    {
                        dialogs = {
                            {char = "lucy07", text = "Well well well..."},
                            {char = "freckle01", text = "Hi."},
                            {char = "lucy07", text = "What do we have here?"},
                            {char = "freckle01", text = "My name is Elanor."}
                        },
                        characters01 = {
                            {name = "scribbleDragon01"}, {name = "lucy07"},
                            {name = "freckle01"}
                        },
                        characters02 = {{name = "empty"}}
                    }, {
                        dialogs = {
                            {char = "lucy07", text = "Hello Elanor."},
                            {
                                char = "lucy07",
                                text = "Well aren't you a perky little peanut!"
                            }, {char = "freckle01", text = "Tee Hee Hee..."}
                        },
                        characters01 = {
                            {name = "scribbleDragon01"}, {name = "lucy07"},
                            {name = "freckle01"}
                        },
                        characters02 = {{name = "empty"}}
                    }, {
                        dialogs = {
                            {
                                char = "lucy07",
                                text = "Now get out of my way, you perky little peanut..."
                            }, {char = "freckle01", text = "...<sniffle> ..."},
                            {
                                char = "lucy07",
                                text = "or I'll chop you into pieces with my sword!"
                            }, {char = "freckle01", text = "Waaaaaaah!!!!!!!"},
                            {char = "freckle01", text = "Mommmmyyyyyyyyyyyy!!!"}
                        },
                        characters01 = {
                            {name = "scribbleDragon01"}, {name = "lucy07"},
                            {name = "freckle01"}
                        },
                        characters02 = {{name = "empty"}}
                    }, {
                        dialogs = {
                            {
                                char = "hopps01",
                                text = "I can't make that!  You know I have to babysit until 8=00!"
                            }, {char = "hopps01", text = "No no no!"},
                            {
                                char = "hopps01",
                                text = "...I want to go with you guys..."
                            }
                        },
                        characters01 = {{name = "empty"}},
                        characters02 = {
                            {name = "hopps01"}, {name = "barkPhone01"}
                        }
                    }, {
                        dialogs = {
                            {char = "freckle01", text = "Mommmmyyyyyyyyyyyy!!!"},
                            {
                                char = "hopps01",
                                text = "Ugghhh!  Hold on...  These kids are a night mare..."
                            }, {
                                char = "hopps01",
                                text = "Can you little monsters stop hurting each other for 2 minutes so I can talk on the phone?"
                            },
                            {
                                char = "lucy07small",
                                text = "We want you to play with us!"
                            },
                            {char = "hopps01", text = "You are such brats..."}
                        },
                        characters01 = {
                            {name = "lucy07small"}, {name = "freckle01"}
                        },
                        characters02 = {
                            {name = "empty"}, {name = "hopps01"},
                            {name = "barkPhone01"}, {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {char = "freckle01", text = "Lucinda hurt me."},
                            {
                                char = "hopps01",
                                text = "Lucy!  What did I say about that sword???"
                            }, {char = "lucy07", text = "Stab your sister?"},
                            {
                                char = "hopps01",
                                text = "Give it to me right now!"
                            },
                            {
                                char = "lucy07",
                                text = "You're not the boss of me!"
                            }
                        },
                        characters01 = {{name = "lucy07"}, {name = "freckle01"}},
                        characters02 = {
                            {name = "empty"}, {name = "hopps01"},
                            {name = "barkPhone01"}, {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {char = "freckle01", text = "She hurt my feelings."},
                            {char = "hopps01", text = "Oh why me?"},
                            {char = "hopps01", text = "Brandon, give me a sec!"},
                            {
                                char = "hopps01",
                                text = "Lucy! Do a repair with your little sister right now!"
                            }, {
                                char = "hopps01",
                                text = "No Brandon, I don't need to go... just give me a sec."
                            }
                        },
                        characters01 = {
                            {name = "lucy07"}, {name = "freckle01"},
                            {name = "empty"}, {name = "empty"}, {name = "empty"}
                        },
                        characters02 = {
                            {name = "empty"}, {name = "hopps01"},
                            {name = "barkPhone01"}, {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {
                                char = "hopps01",
                                text = "Lucinda Liverwurst LemonCake! You do a repair with your sister this instant!"
                            },
                            {
                                char = "hopps01",
                                text = "...or will make the call!"
                            }, {char = "lucy07", text = "..."},
                            {char = "freckle01", text = "..."}
                        },
                        characters01 = {
                            {name = "lucy07"}, {name = "freckle01"},
                            {name = "empty"}, {name = "empty"}, {name = "empty"}
                        },
                        characters02 = {
                            {name = "empty"}, {name = "hopps01"},
                            {name = "barkPhone01"}, {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {char = "empty", text = "Yeah."}, {
                                char = "empty",
                                text = "I'll do it.  I'll call Bugflix and tell them to stop work on the new Prancin Ponies movie..."
                            }, {
                                char = "empty",
                                text = "That's the one you like right? Keeper of the Emerald Dragon..."
                            },
                            {
                                char = "empty",
                                text = "I'll call Brad.  I'll tell him to cancel it."
                            }
                        },
                        characters01 = {
                            {name = "lucy07"}, {name = "freckle01"},
                            {name = "empty"}, {name = "empty"}, {name = "empty"}
                        },
                        characters02 = {
                            {name = "empty"}, {name = "hopps01"},
                            {name = "barkPhone01"}, {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {
                                char = "empty",
                                text = "I miss Brad!   I think I'll call him right now."
                            }, {char = "empty", text = "Nooooooo!!!!"},
                            {char = "empty", text = "Noooooooo!!!!!"},
                            {
                                char = "empty",
                                text = "We'll be good!!! We'll be good!!!"
                            }
                        },
                        characters01 = {
                            {name = "lucy07"}, {name = "freckle01"},
                            {name = "empty"}, {name = "empty"}, {name = "empty"}
                        },
                        characters02 = {
                            {name = "empty"}, {name = "hopps01"},
                            {name = "barkPhone01"}, {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {char = "hopps01", text = "Not another peep!"},
                            {char = "empty", text = "Zip!"},
                            {char = "empty", text = "Zip!"}
                        },
                        characters01 = {
                            {name = "lucy07"}, {name = "freckle01"},
                            {name = "empty"}, {name = "empty"}, {name = "empty"}
                        },
                        characters02 = {
                            {name = "empty"}, {name = "hopps01"},
                            {name = "barkPhone01"}, {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {
                                char = "hopps01",
                                text = "Now go do your repair while I call Brandon back."
                            }, {char = "empty", text = "We forget how..."},
                            {
                                char = "empty",
                                text = "Then you should stop hurting each other!"
                            },
                            {char = "empty", text = "Uggghhh, just ask Alexa."},
                            {char = "empty", text = "Yay Alexa!"}
                        },
                        characters01 = {
                            {name = "lucy07"}, {name = "freckle01"},
                            {name = "empty"}, {name = "empty"}, {name = "empty"}
                        },
                        characters02 = {
                            {name = "empty"}, {name = "hopps01"},
                            {name = "barkPhone01"}, {name = "empty"}
                        }
                    }, {
                        dialogs = {
                            {char = "lucy07", text = "You're mean."},
                            {char = "empty", text = "Wow, you figured it out."},
                            {
                                char = "empty",
                                text = "Congratulations, Albert Einstein."
                            },
                            {
                                char = "empty",
                                text = "You should have your own detective show.  Ha!"
                            }
                        },
                        characters01 = {
                            {name = "lucy07"}, {name = "freckle01"},
                            {name = "empty"}, {name = "empty"}, {name = "empty"}
                        },
                        characters02 = {
                            {name = "hopps01"}, {name = "barkPhone01"},
                            {name = "empty"}
                        }
                    }
                },
                coordinates = {row = 0, col = 0},
                showBottomPath = false,
                showRightPath = false,
                showTopPath = false,
                showLeftPath = false,
                isEndScene = false,
                isStartScene = true,
                maxRow = 0,
                maxCol = 0
            }
        },
        gridSize = {rows = 1, cols = 1}
    }, {
        questTitle = "------- Gilbert Gossington is Gone!",
        startSceneCoords = {row = 0, col = 0},
        endSceneCoords = {col = 1, row = 1},
        sceneConfigs = {
            {
                name = "barn",
                frames = {
                    {
                        dialogs = {
                            {char = "goose01", text = "Giillll-beeeeert....."},
                            {char = "goose01", text = "Giiiiil-beeeeert....."},
                            {
                                char = "goose01",
                                text = "oh, Gilbert, my grubby grey-eyed gosling..."
                            }, {
                                char = "goose01",
                                text = "..where in the world have you mis-placed your self?"
                            }, {char = "chick01", text = "Peep!  Peep!"},
                            {char = "goat01", text = "Me-ee-ee-eh!"}
                        },
                        characters01 = {{name = "goose01"}},
                        characters02 = {{name = "chick01"}, {name = "goat01"}}
                    }
                },
                coordinates = {row = 0, col = 0},
                showBottomPath = false,
                showRightPath = true,
                showTopPath = false,
                showLeftPath = false,
                isEndScene = false,
                isStartScene = true,
                maxRow = 0,
                maxCol = 0
            }, {
                name = "coop",
                frames = {
                    {
                        dialogs = {
                            {
                                char = "goose01",
                                text = "Oh good-ness!  A person."
                            },
                            {
                                char = "hopps01",
                                text = "...Brandon, I know!  I know that!  But the trip..."
                            }, {char = "hopps01", text = "LUCY!"}, {
                                char = "hopps01",
                                text = "Put that sword back in that.. that.. other thing... or I will..."
                            }
                        },
                        characters01 = {{name = "goose01"}},
                        characters02 = {
                            {name = "hopps01"}, {name = "barkPhone01"},
                            {name = "lucy07small"}, {name = "britta04"}
                        }
                    }, {
                        dialogs = {
                            {
                                char = "lucy07small",
                                text = "You don't know the name of this!"
                            },
                            {
                                char = "lucy07small",
                                text = "I'm smarter than you!"
                            }, {char = "goose01", text = "Oh dear friend!"}
                        },
                        characters01 = {{name = "goose01"}},
                        characters02 = {
                            {name = "hopps01"}, {name = "barkPhone01"},
                            {name = "lucy07small"}, {name = "britta04"}
                        }
                    }, {
                        dialogs = {
                            {
                                char = "hopps01",
                                text = "And stop hurting your sister!"
                            },
                            {
                                char = "freckle01",
                                text = "Ooooooowwwwww!  She hurt me!!!"
                            },
                            {
                                char = "lucy07small",
                                text = "You said you would play with us!"
                            }
                        },
                        characters01 = {{name = "goose01"}},
                        characters02 = {
                            {name = "hopps01"}, {name = "barkPhone01"},
                            {name = "lucy07small"}, {name = "freckle01"}
                        }
                    }, {
                        dialogs = {
                            {char = "goose01", text = "oh Sweet salvation!"},
                            {
                                char = "hopps01",
                                text = "<please don't be talking to me...>"
                            }, {char = "goose01", text = "Oh dear friend!"}, {
                                char = "hopps01",
                                text = "<please, please please, please puh-leeeeeeease...  don't be talking to me...>"
                            }, {
                                char = "goose01",
                                text = "Kind stranger!  I'm so fortunate to have found you."
                            }
                        },
                        characters01 = {{name = "goose01"}},
                        characters02 = {
                            {name = "hopps01"}, {name = "barkPhone01"},
                            {name = "lucy07small"}, {name = "freckle01"}
                        }
                    }, {
                        dialogs = {
                            {char = "hopps01", text = "...oh come ON!!!!!!"},
                            {
                                char = "hopps01",
                                text = "Brandon... hold on for literally just 3 seconds..."
                            },
                            {
                                char = "hopps01",
                                text = "I don't want to call you back!"
                            }, {
                                char = "hopps01",
                                text = "Sweet mother monkey milk!  What can possibly be so important????"
                            }
                        },
                        characters01 = {{name = "goose01"}},
                        characters02 = {
                            {name = "hopps01"}, {name = "barkPhone01"},
                            {name = "lucy07small"}, {name = "freckle01"}
                        }
                    }, {
                        dialogs = {
                            {char = "goose01", text = "It's Gilbert..."},
                            {char = "lucy07small", text = "Who's Gilbert?"},
                            {char = "goose01", text = "He's... He's..."},
                            {
                                char = "goose01",
                                text = "He's what? What is Gilbert?"
                            },
                            {
                                char = "lucy07small",
                                text = "Spit it out mother goose!"
                            }
                        },
                        characters01 = {{name = "goose01"}},
                        characters02 = {
                            {name = "hopps01"}, {name = "barkPhone01"},
                            {name = "lucy07small"}, {name = "freckle01"}
                        }
                    }, {
                        dialogs = {
                            {
                                char = "goose01",
                                text = "Gilbert Gossington... is gone!"
                            }, {char = "lucy07small", text = "<gasp>"},
                            {char = "freckle01", text = "<gasp>"}
                        },
                        characters01 = {{name = "goose01"}},
                        characters02 = {
                            {name = "hopps01"}, {name = "barkPhone01"},
                            {name = "lucy07small"}, {name = "freckle01"}
                        }
                    }, {
                        dialogs = {
                            {
                                char = "empty",
                                text = "We can find him!  We can find him!"
                            },
                            {char = "empty", text = "Please Franny, please!"},
                            {
                                char = "empty",
                                text = "Franny, are you there?  Rhino just pulled up in his Jeep.  We can pick you up in 10 minutes."
                            }, {char = "barkPhone01", text = "Can we! Can we!"},
                            {
                                char = "empty",
                                text = "Ugggh... Stop it!  Everybody stop it!"
                            }, {
                                char = "empty",
                                text = "Lucy, you can go help find Gilbert Gargamel Goose-hopper, but be back in ten minutes."
                            },
                            {
                                char = "empty",
                                text = "Brandon.  Come pick me up.  I'm ready."
                            }, {char = "empty", text = "-----------"},
                            {char = "empty", text = "-----------"},
                            {char = "empty", text = "-----------"}
                        },
                        characters01 = {{name = "goose01"}},
                        characters02 = {
                            {name = "hopps01"}, {name = "barkPhone01"},
                            {name = "lucy07small"}, {name = "maldara01"}
                        }
                    }
                },
                coordinates = {row = 0, col = 1},
                showBottomPath = true,
                showRightPath = false,
                showTopPath = false,
                showLeftPath = true,
                isEndScene = false,
                isStartScene = false,
                maxRow = 0,
                maxCol = 1
            }, {
                name = "well01",
                frames = {
                    {
                        dialogs = {
                            {char = "hopps01", text = "Hey Franny!"}, {
                                char = "scramper01",
                                text = "Never babysit!  Ever! No matter how much they pay you..."
                            },
                            {
                                char = "hopps01",
                                text = "Those kids are adorable!"
                            },
                            {
                                char = "hopps01",
                                text = "...don't even get me started..."
                            },
                            {
                                char = "skink01",
                                text = "...they are a couple of ticks in pig tails..."
                            }, {char = "saki", text = "To the lake!"},
                            {char = "empty", text = "Tally ho!"}
                        },
                        characters01 = {
                            {name = "empty"}, {name = "empty"},
                            {name = "hopps01"}
                        },
                        characters02 = {
                            {name = "scramper01"}, {name = "skink01"},
                            {name = "saki"}
                        }
                    }, {
                        dialogs = {
                            {char = "hopps01", text = "Did you bring it?"},
                            {char = "scramper01", text = "Yup.  Take a look!"},
                            {
                                char = "hopps01",
                                text = "...the Staff of Truth..."
                            },
                            {
                                char = "hopps01",
                                text = "...it's... it's so......."
                            }, {char = "saki", text = "...enchanting.....?"}
                        },
                        characters01 = {
                            {name = "empty"}, {name = "empty"},
                            {name = "hopps01"}, {name = "staffOfTruth01"}
                        },
                        characters02 = {
                            {name = "scramper01"}, {name = "skink01"},
                            {name = "saki"}
                        }
                    }
                },
                coordinates = {col = 1, row = 1},
                showBottomPath = false,
                showRightPath = true,
                showTopPath = true,
                showLeftPath = false,
                isEndScene = true,
                isStartScene = false,
                maxRow = 1,
                maxCol = 1
            }, {
                name = "lake",
                frames = {
                    {
                        dialogs = {
                            {
                                char = "looney01cu",
                                text = "That's quite a trophy..."
                            },
                            {char = "hopps01", text = "Creepy old leperchaun!"},
                            {
                                char = "scramper01",
                                text = "Wha... What are you doing here?"
                            }, {
                                char = "looney01cu",
                                text = "Ha. Funny story. It was choice time, and I happened to be walking by with my water color set and easel, so I thought I might stop and paint the sun set."
                            }, {
                                char = "hopps01",
                                text = "oh... I didn't know you... wait. ...you don't have any water colors..."
                            },
                            {
                                char = "saki",
                                text = "Where is the Staff small rabbit?"
                            },
                            {
                                char = "looney01cu",
                                text = "Shall we do this the easy way of the hard way?"
                            }
                        },
                        characters01 = {
                            {name = "empty"}, {name = "empty"},
                            {name = "hopps01"}
                        },
                        characters02 = {
                            {name = "scramper01"}, {name = "looney01cu"},
                            {name = "whammer01"}
                        }
                    }
                },
                coordinates = {row = 1, col = 2},
                showBottomPath = false,
                showRightPath = false,
                showTopPath = false,
                showLeftPath = true,
                isEndScene = true,
                isStartScene = false,
                maxRow = 1,
                maxCol = 2
            }
        },
        gridSize = {rows = 2, cols = 3}
    }
}
return module

]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBXf90226adf4fd4f0f833e836f5253fb63">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Constants</string>
					<string name="ScriptGuid">{2073ba3e-aa67-4f33-8ef8-2e1ffe575d1b}</string>
					<ProtectedString name="Source"><![CDATA[
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX8d9b62e5e4914c7a9d59981cca8079ae">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Constants</string>
						<string name="ScriptGuid">{398501bf-a4db-4733-aea8-9e60e4920214}</string>
						<ProtectedString name="Source"><![CDATA[local module = {
    buffer = 0,
    -- singleScene = true,
    singleScene = false,
    -- 
    entered = {value = false},
    baseWallHeight = 16,
    walkSpeed = 30,
    -- walkSpeed = 16,
    questWallHeight = 24,
    sceneHeight = 50
    -- 
}

module.dialogColors = {
    Color3.fromRGB(253, 158, 240), Color3.fromRGB(225, 253, 158),
    Color3.fromRGB(253, 228, 158), Color3.fromRGB(158, 253, 179),
    Color3.fromRGB(158, 215, 253)
}

local islandLength = 36
local bridgeBaseLength = 64
local bridgeOverlap = 2
local bridgeLength = bridgeBaseLength - 2 * bridgeOverlap

module.islandLength = islandLength
module.bridgeLength = bridgeLength
module.totalIslandLength = islandLength + bridgeLength

module.buttonLabels = {PrevPage = "Prev Page", NextPage = "Next Page"}

local raven = {
    displayName = "Raven",
    decalId = '5897424121',
    backgroundColorIdx = 1
}

local britta = {
    displayName = "Britta",
    decalId = '5897433108',
    backgroundColorIdx = 2
}

local mitzy02 = {
    displayName = "Mitzy Meow",
    decalId = '5976876671',
    backgroundColorIdx = 2
}

local vulcan = {
    displayName = "Vulcan",
    decalId = '5999464799',
    backgroundColorIdx = 1
}

module.characters = {

    raven05 = raven,
    raven04 = raven,
    raven001 = raven,
    raven002 = raven,
    raven003 = raven,
    raven004 = raven,

    raven = raven,
    britta = britta,
    britta01 = britta,
    britta04 = britta,

    -- 
    -- dress06
    -- lucy07
    -- lucy07small
    -- oliveRori01cu
    -- scribbleDragon01
    -- skink01
    -- whammer01

    -- saki
    -- barn
    -- drip
    -- well01
    -- cub
    -- barkPhone01
    -- scramper01

    saki = {
        displayName = "Saki",
        decalId = 'rbxassetid://6073681717',
        backgroundColorIdx = 1
    },
    barn = {
        displayName = "Barn",
        decalId = 'rbxassetid://5991343849',
        backgroundColorIdx = 1
    },
    drip = {displayName = "Drip", decalId = 'xxx', backgroundColorIdx = 1},
    well01 = {displayName = "Well01", decalId = 'xxx', backgroundColorIdx = 1},
    cub = {displayName = "Cub", decalId = 'xxx', backgroundColorIdx = 1},
    barkPhone01 = {
        displayName = "BarkPhone01",
        decalId = 'xxx',
        backgroundColorIdx = 1
    },
    scramper01 = {
        displayName = "Scramper01",
        decalId = 'xxx',
        backgroundColorIdx = 1
    },

    slicerDicer01 = {
        displayName = "Slicer Dicer",
        decalId = '5991267736',
        backgroundColorIdx = 1
    },
    drake = {
        displayName = "Drake",
        decalId = '5991267736',
        backgroundColorIdx = 1
    },
    hopps01 = {
        displayName = "Hops",
        decalId = '5977953968',
        backgroundColorIdx = 1
    },

    goose01 = {
        displayName = "Goose",
        decalId = '5991275787',
        backgroundColorIdx = 1
    },
    angus01 = {
        displayName = "Angus",
        decalId = '5991277363',
        backgroundColorIdx = 1
    },
    bug = {displayName = "Bug", decalId = '5898504138', backgroundColorIdx = 1},

    queenGoose01 = {
        displayName = "Queen Goose",
        decalId = '5991275787',
        backgroundColorIdx = 1
    },

    smallGoose01 = {
        displayName = "Small Goose",
        decalId = '5991272287',
        backgroundColorIdx = 1
    },
    sillyGoose01 = {
        displayName = "Silly Goose",
        decalId = '5977953221',
        backgroundColorIdx = 1
    },
    littleGoose = {
        displayName = "Little Goose",
        decalId = '5991275498',
        backgroundColorIdx = 1
    },
    babyTroll01 = {
        displayName = "Baby Troll",
        decalId = '6073033076',
        backgroundColorIdx = 1
    },
    babyTroll02 = {
        displayName = "Baby Troll",
        decalId = '6073033076',
        backgroundColorIdx = 1
    },
    will01 = {
        displayName = "Baby Troll",
        decalId = '6073033076',
        backgroundColorIdx = 1
    },

    fancyDudeFromFrance01 = {
        displayName = "fancyDudeFromFrance01",
        decalId = '5991276655',
        backgroundColorIdx = 1
    },
    goat01 = {
        displayName = "Goat",
        decalId = '6063417478',
        backgroundColorIdx = 1
    },
    robby01 = {
        displayName = "Robby",
        decalId = '5991273473',
        backgroundColorIdx = 1
    },
    vesper01 = {
        displayName = "Robby",
        decalId = '5991273473',
        backgroundColorIdx = 1
    },
    snurtch01 = {
        displayName = "Robby",
        decalId = '5991273473',
        backgroundColorIdx = 1
    },
    waterfall = {
        displayName = "Waterfall",
        decalId = '5991339525',
        backgroundColorIdx = 1
    },
    cave = {
        displayName = "Cave",
        decalId = '5991342911',
        backgroundColorIdx = 1
    },
    hill = {
        displayName = "Hill",
        decalId = '5991342052',
        backgroundColorIdx = 1
    },
    lake = {
        displayName = "Lake",
        decalId = '5991341377',
        backgroundColorIdx = 1
    },
    log = {displayName = "Log", decalId = '5991341326', backgroundColorIdx = 1},
    pond = {
        displayName = "Pond",
        decalId = '5991340703',
        backgroundColorIdx = 1
    },
    pool = {
        displayName = "Pool",
        decalId = '5991340615',
        backgroundColorIdx = 1
    },
    swamp = {
        displayName = "Swamp",
        decalId = '5991343667',
        backgroundColorIdx = 1
    },
    bees = {
        displayName = "Bees",
        decalId = '5991343806',
        backgroundColorIdx = 1
    },
    cap = {displayName = "Cap", decalId = '5991343197', backgroundColorIdx = 1},
    castle = {
        displayName = "Castle",
        decalId = '5991343060',
        backgroundColorIdx = 1
    },
    chick01 = {
        displayName = "Chick",
        decalId = '6060376973',
        backgroundColorIdx = 1
    },
    coop = {
        displayName = "Coop",
        decalId = '5991342867',
        backgroundColorIdx = 1
    },
    cow01 = {
        displayName = "Cow",
        decalId = '6060376567',
        backgroundColorIdx = 1
    },
    girl09 = {
        displayName = "Girl",
        decalId = '5991275978',
        backgroundColorIdx = 1
    },
    lucky = {
        displayName = "Lucky",
        decalId = '5977954909',
        backgroundColorIdx = 3
    },
    lucky01 = {
        displayName = "Lucky",
        decalId = '5977954909',
        backgroundColorIdx = 3
    },
    looney01cu = {
        displayName = "Lucky",
        decalId = '5977954909',
        backgroundColorIdx = 3
    },
    looney01 = {
        displayName = "Lucky",
        decalId = '5977954909',
        backgroundColorIdx = 3
    },
    mat = {displayName = "Mat", decalId = '5991341059', backgroundColorIdx = 1},
    mop = {displayName = "Mop", decalId = '5991340991', backgroundColorIdx = 1},
    pan = {displayName = "Pan", decalId = '5991340855', backgroundColorIdx = 1},
    slide = {
        displayName = "Slide",
        decalId = '5991340411',
        backgroundColorIdx = 1
    },
    swing = {
        displayName = "Swing",
        decalId = '5991340158',
        backgroundColorIdx = 1
    },

    stump = {
        displayName = "Stump",
        decalId = '5991340320',
        backgroundColorIdx = 1
    },
    bog = {displayName = "Bog", decalId = '5991343667', backgroundColorIdx = 1},
    home = {
        displayName = "Home",
        decalId = '5991341898',
        backgroundColorIdx = 1
    },
    bee = {displayName = "Bee", decalId = '5999465084', backgroundColorIdx = 1},
    elf = {displayName = "Elf", decalId = '5991266909', backgroundColorIdx = 4},
    bun = {displayName = "Bun", decalId = '5991343501', backgroundColorIdx = 1},
    dog01 = {
        displayName = "Dog",
        decalId = '5999464941',
        backgroundColorIdx = 1
    },
    dennisTheMenace = {
        displayName = "Dennis the Menace",
        decalId = '5999464873',
        backgroundColorIdx = 1
    },
    katieKooper01 = {
        displayName = "Katie Kooper",
        decalId = '5991267836',
        backgroundColorIdx = 1
    },
    troll01 = {
        displayName = "Troll01",
        decalId = '5999464489',
        backgroundColorIdx = 1
    },
    troll02 = {
        displayName = "Troll02",
        decalId = '5999464489',
        backgroundColorIdx = 3
    },
    rori = {
        displayName = "Rori",
        decalId = '5991267444',
        backgroundColorIdx = 4
    },
    vulcan = vulcan,
    vulcan01 = vulcan,

    luke01 = {
        displayName = "Luke",
        decalId = '5998961085',
        backgroundColorIdx = 2
    },
    hudson01 = {
        displayName = "Hudson",
        decalId = '5998961874',
        backgroundColorIdx = 4
    },
    trollKing01 = {
        displayName = "Troll King",
        decalId = '5897428591',
        backgroundColorIdx = 3
    },
    trollKing = {
        displayName = "Troll King",
        decalId = '5897428591',
        backgroundColorIdx = 3
    },
    goblinKing02 = {
        displayName = "Troll King",
        decalId = '5897428591',
        backgroundColorIdx = 3
    },
    goblinKing01 = {
        displayName = "Troll King",
        decalId = '5897428591',
        backgroundColorIdx = 3
    },
    freckle = {
        displayName = "Freckle",
        decalId = '5897430768',
        backgroundColorIdx = 3
    },
    freckle01 = {
        displayName = "Freckle",
        decalId = '5897430768',
        backgroundColorIdx = 3
    },
    missyMeow01 = {
        displayName = "Missy Meow",
        decalId = '5898504226',
        backgroundColorIdx = 1
    },
    mitzyMeow01 = mitzy02,
    mitzy02 = mitzy02,
    kat = {displayName = "Kat", decalId = '5977951764', backgroundColorIdx = 3},
    liz2 = {displayName = "Liz", decalId = '5981806423', backgroundColorIdx = 2}
}

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX0b81909ac7b743b8add06babed3064b7">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Characters</string>
					<string name="ScriptGuid">{5a5722cf-5e44-4bd9-a62d-e60c9beb04f9}</string>
					<ProtectedString name="Source"><![CDATA[
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX9410037d9b834b918cb5dae965b46769">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Characters</string>
						<string name="ScriptGuid">{3a08ac63-fffb-4a52-baa3-4e08a7cd4d2b}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local Utils = require(Sss.Source.Utils.U001GeneralUtils)
local InstanceUtils = require(Sss.Source.Utils.U002InstanceUtils)

local module = {}

renderCharacters = function(props)
    local characterTemplate = props.template
    local itemConfigs = props.itemConfigs
    local characterType = props.characterType
    local sceneFolder = props.sceneFolder
    local clonedScene = props.clonedScene
    local type = props.type

    local charFolder = Utils.getOrCreateFolder(
                           {
            name = characterType .. "-folder",
            parent = sceneFolder
        })

    local xGap = 1
    local zGap = 1
    local nameStub = 'CharacterClone'

    InstanceUtils.deleteInstanceByNameStub(
        {parent = charFolder, nameStub = nameStub})

    local charImageBlock = Utils.getFirstDescendantByName(characterTemplate,
                                                          "CharacterImage")

    -- Ensure player doesn't crash into invisivble template
    Utils.setItemAndChildrenPropsByInst({
        item = characterTemplate,
        props = {Transparency = 1, CanCollide = false, Anchored = true}
    })

    Utils.hideItemAndChildren({item = characterTemplate, hide = false})

    -- If characters are welded to scenebase, things go bad.
    local welds = Utils.getDescendantsByType(characterTemplate, "Weld")
    for i, weld in ipairs(welds) do
        weld.Enabled = false
        -- 
    end

    local cameraPath1 = Utils.getFirstDescendantByName(clonedScene,
                                                       "ScreenCameraPath1")

    -- For each character
    for i, itemConfig in ipairs(itemConfigs) do
        local name = itemConfig.name

        if (name ~= "blank" and name ~= "empty" and name ~= "") then
            local x = (i - 1) * (charImageBlock.Size.X + xGap) *
                          (type == 2 and 1 or -1)

            local z = (i - 1) * (charImageBlock.Size.Z + zGap)

            local newChar = Utils.cloneModel(
                                {
                    model = characterTemplate,
                    position = characterTemplate.PrimaryPart.CFrame *
                        CFrame.new(Vector3.new(-x, 0, z)),
                    suffix = "Clone" .. i
                })

            -- point character at camera
            newChar:SetPrimaryPartCFrame(
                CFrame.new(newChar.PrimaryPart.Position, cameraPath1.Position))
            -- Point along y axis only
            local orientation = newChar.PrimaryPart.Orientation
            local newOrientation = Vector3.new(0, orientation.Y, 0)

            Utils.setItemAndChildrenPropsByInst(
                {
                    item = newChar.PrimaryPart,
                    props = {Orientation = newOrientation}
                })

            -- newChar.Parent = charFolder

            Utils.mergeTables(newChar, {
                Parent = charFolder,
                -- Parent = characterTemplate.Parent,
                Name = nameStub .. i
            })

            local decalId = Utils.getDecalIdFromName({name = itemConfig.name})
            applyDecalsToCharacter({part = newChar, decalId = decalId})
            applyLabelsToCharacter({part = newChar, text = itemConfig.name})

            Utils.hideItemAndChildren({item = newChar, hide = false})
            newChar.PrimaryPart.Transparency = 1
        end
    end

    Utils.hideItemAndChildren({item = characterTemplate, hide = true})

end

function applyDecalsToCharacter(props)
    local part = props.part
    local decalId = props.decalId

    local decalUri = 'rbxassetid://' .. decalId
    local decalFront = Utils.getFirstDescendantByName(part,
                                                      "CharacterDecalFront")
    local decalBack = Utils.getFirstDescendantByName(part, "CharacterDecalBack")

    decalFront.Image = decalUri
    decalBack.Image = decalUri
end

function applyLabelsToCharacter(props)
    local part = props.part
    local text = props.text or "no label"

    local charLabelFront =
        Utils.getFirstDescendantByName(part, "CharLabelFront")
    local charLabelBack = Utils.getFirstDescendantByName(part, "CharLabelBack")
    charLabelFront.Text = text
    charLabelBack.Text = text
end

function toggleLabelVisibility(props)
    local part = props.part
    local visible = props.visible

    local charLabelFront =
        Utils.getFirstDescendantByName(part, "CharLabelFront")
    local charLabelBack = Utils.getFirstDescendantByName(part, "CharLabelBack")
    charLabelFront.Visible = visible
    charLabelBack.Visible = visible
end

function module.addCharactersToScene(props)
    local frameConfig = props.frameConfig
    local clonedScene = props.clonedScene
    local sceneFolder = props.sceneFolder

    local characterConfigs01 = frameConfig.characters01
    local characterConfigs02 = frameConfig.characters02

    local characterType = "Character01"
    renderCharacters({
        template = Utils.getFirstDescendantByName(clonedScene, characterType),
        itemConfigs = characterConfigs01,
        sceneFolder = sceneFolder,
        clonedScene = clonedScene,
        characterType = characterType,
        type = 1
    })
    -- 
    -- 
    local characterType2 = "Character02"
    renderCharacters({
        template = Utils.getFirstDescendantByName(clonedScene, characterType2),
        itemConfigs = characterConfigs02,
        sceneFolder = sceneFolder,
        clonedScene = clonedScene,
        characterType = characterType2,
        type = 2
    })

end

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBXef424ee9588e4da8a3d2817df6ca71a7">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Scenes</string>
					<string name="ScriptGuid">{b16f37e9-971c-4b46-8095-fdf018efd5b9}</string>
					<ProtectedString name="Source"><![CDATA[
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBXb8c962ec50584fefa5b9355e524226f9">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Scenes</string>
						<string name="ScriptGuid">{7ad4421e-fa9d-4253-b43f-c5efe06735fb}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local Utils = require(Sss.Source.Utils.U001GeneralUtils)
local Bridges = require(Sss.Source.Bridges.Bridges)
local Characters = require(Sss.Source.Characters.Characters)
local TheaterSeat = require(Sss.Source.TheaterSeat.TheaterSeat)
local Teleporters = require(Sss.Source.Teleporters.Teleporters)
local DropBox = require(Sss.Source.DropBox.DropBox)
local Location = require(Sss.Source.Location.Location)
local RowOfParts = require(Sss.Source.AddRemoteObjects.RowOfParts)
local Constants = require(Sss.Source.Constants.Constants)

local module = {}

function module.addScenes(props)
    local parent = props.parent
    local sceneConfigs = props.sceneConfigs
    local questConfig = props.questConfig
    local gridPadding = props.gridPadding
    local questFolder = props.questFolder
    local questIndex = props.questIndex

    local sceneTemplateModel = Utils.getFirstDescendantByName(questFolder,
                                                              "SceneTemplate")

    local sceneBase = Utils.getFirstDescendantByName(questFolder, "SceneBase")

    local sceneStartPosition = getStartPosition(
                                   {
            gridPadding = gridPadding,
            parent = parent,
            child = sceneBase
        })

    local thisTeleporter = Utils.getFirstDescendantByName(sceneTemplateModel,
                                                          "QuestTeleporterModel")
    local skyBoxTeleporter = thisTeleporter:Clone()
    skyBoxTeleporter.Parent = questFolder
    skyBoxTeleporter.Name = thisTeleporter.Name .. "-home"

    for sceneIndex, sceneConfig in ipairs(sceneConfigs) do
        local entered2 = {value = false}

        local newPosition = getNewScenePosition(
                                {
                coordinates = sceneConfig.coordinates,
                template = sceneBase
            })

        local clonedScene = Utils.cloneModel(
                                {
                model = sceneTemplateModel,
                position = CFrame.new(newPosition + sceneStartPosition),
                suffix = "Clone" .. "-Q" .. questIndex .. "-S" .. sceneIndex
            })

        clonedScene.Name = clonedScene.Name .. sceneIndex

        Teleporters.addTeleporters({
            parent = clonedScene,
            sceneIndex = sceneIndex,
            questIndex = questIndex,
            isStartScene = sceneConfig.isStartScene,
            isEndScene = sceneConfig.isEndScene,
            questTitle = questConfig.questTitle,
            skyBoxTeleporter = skyBoxTeleporter
        })

        local dropBox = Utils.getFirstDescendantByName(clonedScene,
                                                       "DropBoxModel")
        local dropBoxItem = sceneConfig.item or {name = "letter-C"}
        DropBox.configDropBox({
            scene = clonedScene,
            sceneIndex = sceneIndex,
            questIndex = questIndex,
            isStartScene = sceneConfig.isStartScene,
            isEndScene = sceneConfig.isEndScene,
            dropBox = dropBox,
            entered2 = entered2,
            item = dropBoxItem

        })

        local sceneFolder = Utils.getOrCreateFolder(
                                {
                name = clonedScene.Name .. sceneIndex,
                parent = questFolder
            })

        clonedScene.Parent = sceneFolder

        function addCharactersToScene(charProps)
            Characters.addCharactersToScene(charProps)
        end

        local seats = Utils.getDescendantsByName(clonedScene, "CouchSeat")

        for i, seat in ipairs(seats) do
            local addSeatProps = {
                seat = seat,
                clonedScene = clonedScene,
                sceneConfig = sceneConfig,
                addCharactersToScene = addCharactersToScene,
                sceneFolder = sceneFolder
            }

            TheaterSeat.addSeat(addSeatProps)
        end

        Bridges.configBridges({
            sceneConfig = sceneConfig,
            clonedScene = clonedScene
        })

        local charProps = {
            frameConfig = sceneConfig.frames[1],
            clonedScene = clonedScene,
            sceneFolder = sceneFolder
        }

        addCharactersToScene(charProps)

        Location.addLocation({scene = clonedScene, sceneConfig = sceneConfig})

        local gameTitleLabel = Utils.getFirstDescendantByName(clonedScene,
                                                              "GameTitleLabel")
        gameTitleLabel.Text = "Quest:   " ..
                                  (questConfig.questTitle or 'Game Title')

    end
    sceneTemplateModel:Destroy()
end

getStartPosition = function(props)
    local parent = props.parent
    local child = props.child
    local gridPadding = props.gridPadding

    local childSize = child.Size
    local desiredOffsetFromParentEdge = Vector3.new(-gridPadding / 2, 0,
                                                    -gridPadding / 2)

    local itemDuplicationConfig = {
        alignToParentFarEdge = Vector3.new(1, 1, 1),
        moveTowardZero = Vector3.new(-1, 1, -1),
        alignToChildFarEdge = Vector3.new(-1, 1, -1)
    }

    local offsetProps = {
        parent = parent,
        childSize = childSize,
        itemDuplicationConfig = itemDuplicationConfig,
        offset = desiredOffsetFromParentEdge
    }

    return RowOfParts.getCenterPosFromDesiredEdgeOffset(offsetProps)
end

function getNewScenePosition(props)
    local coordinates = props.coordinates
    local gapX = Constants.islandLength + Constants.bridgeLength
    local newX = -(gapX + Constants.buffer) * coordinates.col
    local newZ = coordinates.row *
                     (Constants.islandLength + Constants.bridgeLength +
                         Constants.buffer)
    return Vector3.new(newX, 0, -newZ)
end
return module

-- local function regionEnter(plr, clonedScene, entered)
--     local buttonPressed = false
--     if not buttonPressed then
--         buttonPressed = true
--         if not entered.value then
--             unHideWall(clonedScene)
--             entered.value = true
--         end
--         buttonPressed = false
--     end
-- end

-- local function regionExit(plr, clonedScene, entered)
--     local buttonPressed = false
--     if not buttonPressed then
--         buttonPressed = true
--         if entered.value then
--             hideWall(clonedScene)
--             entered.value = false
--         end
--         buttonPressed = false
--     end
-- end

-- local part = Utils.getFirstDescendantByName(clonedScene,
--                                             "UserDetectionRegion")

-- local function onPartTouched(otherPart)
--     -- Get the other part's parent
--     local partParent = otherPart.Parent
--     -- Look for a humanoid in the parent
--     local humanoid = partParent:FindFirstChildWhichIsA("Humanoid")
--     if humanoid then
--         regionEnter(humanoid, clonedScene, entered)
--     end
-- end

-- part.Touched:Connect(onPartTouched)

-- local function onPartTouchEnded(otherPart)
--     local partParent = otherPart.Parent
--     if partParent then
--         local humanoid = partParent:FindFirstChildWhichIsA("Humanoid")
--         if humanoid then
--             regionExit(humanoid, clonedScene, entered)
--         end
--     end
-- end

-- part.TouchEnded:Connect(onPartTouchEnded)
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX882578c365884b4da24c73c79c0c9db7">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Location</string>
					<string name="ScriptGuid">{f18e6b04-1c49-48a4-a27f-e4feca1b11f5}</string>
					<ProtectedString name="Source"><![CDATA[
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBXafd30ef8861f47d5b8f52723f9f0d997">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Location</string>
						<string name="ScriptGuid">{927445eb-68f7-4200-97d2-128b8fe5687a}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local Utils = require(Sss.Source.Utils.U001GeneralUtils)

local module = {}

function module.addLocation(props)
    local scene = props.scene
    local sceneConfig = props.sceneConfig

    -- Image
    -- Image
    local imageId = Utils.getDecalIdFromName({name = sceneConfig.name})

    local locationImageFront = Utils.getFirstDescendantByName(scene,
                                                              "LocationImageFront")
    local locationImageBack = Utils.getFirstDescendantByName(scene,
                                                             "LocationImageBack")
    locationImageFront.Image = 'rbxassetid://' .. imageId
    locationImageBack.Image = 'rbxassetid://' .. imageId

    -- Label
    -- Label
    local locationLabel =
        Utils.getDisplayNameFromName({name = sceneConfig.name})
    local locationLabelFront = Utils.getFirstDescendantByName(scene,
                                                              "LocationLabelFront")
    local locationLabelBack = Utils.getFirstDescendantByName(scene,
                                                             "LocationLabelBack")

    locationLabelBack.Text = locationLabel
    locationLabelFront.Text = locationLabel

end

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBXc999eea723ff4b83b71da5979f0a963b">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Buttons</string>
					<string name="ScriptGuid">{a5fa8fd0-11e6-4735-a9d0-30b75a3a84da}</string>
					<ProtectedString name="Source"><![CDATA[
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX80a58a77daa448df92c32c73a3b24f40">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Buttons</string>
						<string name="ScriptGuid">{47ecc08c-08ce-4e1b-b16a-e4699be8a934}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local Utils = require(Sss.Source.Utils.U001GeneralUtils)
local Constants = require(Sss.Source.Constants.Constants)

local module = {nextButtonEvent = nil, prevButtonEvent = nil}

function updateButtonActiveStatus(props)
    local pageNum = props.pageNum
    local numPages2 = props.numPages
    local nextButton = props.nextButton
    local prevButton = props.prevButton
    local pageNumLabel = props.pageNumLabel
    local openBridgeDoor = props.openBridgeDoor
    local clonedScene = props.clonedScene

    local lastPage = pageNum >= numPages2
    nextButton.Active = not lastPage
    nextButton.Text = not lastPage and Constants.buttonLabels.NextPage or "---"

    prevButton.Active = pageNum > 1
    prevButton.Text = prevButton.Active and Constants.buttonLabels.PrevPage or
                          "---"

    pageNumLabel.Text = "Page: " .. pageNum .. " of " .. numPages2

    if lastPage then openBridgeDoor({clonedScene = clonedScene}) end

end

function configButtons(props)
    local clonedScene = props.clonedScene
    local numPages = props.numPages
    local sceneConfig = props.sceneConfig
    local sceneFolder = props.sceneFolder
    local addCharactersToScene = props.addCharactersToScene
    local renderScreenDialog = props.renderScreenDialog
    local sgui = props.sgui
    local player = props.player
    local openBridgeDoor = props.openBridgeDoor

    local nextButton = Utils.getFirstDescendantByName(sgui, "NextPageButton")
    local prevButton = Utils.getFirstDescendantByName(sgui, "PrevPageButton")
    local pageNumLabel = Utils.getFirstDescendantByName(sgui, "PageNumLabel")

    local pn = {value = 1}

    if module.nextButtonEvent then module.nextButtonEvent:Disconnect() end
    if module.prevButtonEvent then module.prevButtonEvent:Disconnect() end

    updateButtonActiveStatus({
        pageNum = 1,
        numPages = numPages,
        nextButton = nextButton,
        prevButton = prevButton,
        pageNumLabel = pageNumLabel,
        openBridgeDoor = openBridgeDoor,
        clonedScene = clonedScene
    })

    function updateFrameItems(props)
        local clonedScene2 = props.clonedScene
        local numPages2 = props.numPages
        local sceneConfig2 = props.sceneConfig
        local pn2 = props.pn
        local player = props.player
        local buttonPressed = false

        if not buttonPressed then
            buttonPressed = true
            updateButtonActiveStatus({
                pageNum = pn2.value,
                numPages = numPages2,
                nextButton = nextButton,
                prevButton = prevButton,
                pageNumLabel = pageNumLabel,
                openBridgeDoor = openBridgeDoor,
                clonedScene = clonedScene,
                player = player
            })

            local newFrameConfig = sceneConfig2.frames[pn2.value]
            local newSceneProps = {
                frameConfig = newFrameConfig,
                clonedScene = clonedScene2,
                sceneFolder = sceneFolder
            }

            addCharactersToScene(newSceneProps)
            renderScreenDialog({frameConfig = newFrameConfig, player = player})
            buttonPressed = false
        end
    end

    function incrementPage(props)
        local clonedScene1 = props.clonedScene
        local numPages1 = props.numPages
        local sceneConfig1 = props.sceneConfig
        local player1 = props.player

        local pn3 = props.pn
        if pn3.value < numPages1 then
            pn3.value = pn3.value + 1
            updateFrameItems({
                clonedScene = clonedScene1,
                pn = pn3,
                numPages = numPages1,
                sceneConfig = sceneConfig1,
                player = player1
            })
        end

    end

    function decrementPage(props)
        local clonedScene1 = props.clonedScene
        local numPages1 = props.numPages
        local sceneConfig1 = props.sceneConfig
        local player2 = props.player

        local pn4 = props.pn
        if pn4.value > 1 then
            pn4.value = pn4.value - 1
            updateFrameItems({
                clonedScene = clonedScene1,
                pn = pn4,
                numPages = numPages1,
                sceneConfig = sceneConfig1,
                player = player2
            })
        end
    end

    local function onIncrementPage()
        incrementPage({
            pn = pn,
            clonedScene = clonedScene,
            numPages = numPages,
            sceneConfig = sceneConfig,
            player = player
        })
    end

    local function onDecrementPage()
        decrementPage({
            pn = pn,
            clonedScene = clonedScene,
            numPages = numPages,
            sceneConfig = sceneConfig,
            player = player
        })
    end

    module.nextButtonEvent = nextButton.MouseButton1Click:Connect(
                                 onIncrementPage)
    module.prevButtonEvent = prevButton.MouseButton1Click:Connect(
                                 onDecrementPage)
end

module.configButtons = configButtons
return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="Folder" referent="RBXfb315b2950134d17a5338195dc8e3556">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">Bridges</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBXab272528edf44111b238acec57a5d997">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Bridges</string>
						<string name="ScriptGuid">{1ba52c77-b039-49b5-8231-8caa0c78d8a6}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local Utils = require(Sss.Source.Utils.U001GeneralUtils)

local module = {}

function module.configBridges(props)
    -- all bridges are created in clone.
    -- remove bridges that do not go anywhere
    local sceneConfig = props.sceneConfig
    local clonedScene = props.clonedScene

    local showBottomPath = sceneConfig.showBottomPath
    local showRightPath = sceneConfig.showRightPath
    local showTopPath = sceneConfig.showTopPath
    local showLeftPath = sceneConfig.showLeftPath

    if (showRightPath) then
        local baseWallRight = Utils.getFirstDescendantByName(clonedScene,
                                                             "BaseWallRight")
        if baseWallRight then baseWallRight:Destroy() end
    else

        local bridgeRightModel = Utils.getFirstDescendantByName(clonedScene,
                                                                "BridgeRightModel")
        if bridgeRightModel then bridgeRightModel:Destroy() end
    end

    if (showLeftPath) then
        local baseWallLeft = Utils.getFirstDescendantByName(clonedScene,
                                                            "BaseWallLeft")
        if baseWallLeft then baseWallLeft:Destroy() end
    end

    if (showBottomPath) then
        local baseWallFront = Utils.getFirstDescendantByName(clonedScene,
                                                             "BaseWallFront")
        if baseWallFront then baseWallFront:Destroy() end
    else
        local bridgeFrontModel = Utils.getFirstDescendantByName(clonedScene,
                                                                "BridgeFrontModel")
        bridgeFrontModel:Destroy()
    end

    if (showTopPath) then
        local bridgeWallBack = Utils.getFirstDescendantByName(clonedScene,
                                                              "BaseWallBack")
        bridgeWallBack:Destroy()

    end

end

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBXacedcf32195d4aa38eed3b2faa52eb43">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Teleporters</string>
					<string name="ScriptGuid">{811dd9c7-223c-44c5-b7ff-c6c647748693}</string>
					<ProtectedString name="Source"><![CDATA[
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBXb89adaeef7494b30b4da33450cc991a2">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Teleporters</string>
						<string name="ScriptGuid">{549cdd75-d6ec-42cd-8c15-193368c368c0}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local Utils = require(Sss.Source.Utils.U001GeneralUtils)

local module = {}

function module.addTeleporters(props)
    local parent = props.parent
    local sceneIndex = props.sceneIndex
    local questIndex = props.questIndex
    local questTitle = props.questTitle
    local isStartScene = props.isStartScene
    local isEndScene = props.isEndScene
    local skyBoxTeleporter = props.skyBoxTeleporter

    local function setLocalTPTargetToRemoteTP(localTP, remoteTP)

        localTP.PrimaryPart.Touched:Connect(
            function(touchPart)
                if touchPart and touchPart.Parent and touchPart.Parent.Humanoid and
                    touchPart.Parent.currentlyTeleporting.Value == false then

                    local Character = touchPart.Parent

                    local questTeleporterReceiver =
                        Utils.getFirstDescendantByName(remoteTP,
                                                       "QuestTeleporterReceiver")
                    local teleportLocation =
                        questTeleporterReceiver.CFrame + Vector3.new(0, 10, 0)

                    local ts = game:GetService("TweenService")

                    wait(2)

                    local tweenInfo = TweenInfo.new(2)
                    local t = ts:Create(Character.PrimaryPart, tweenInfo,
                                        {CFrame = teleportLocation})
                    Character.PrimaryPart.Anchored = true
                    -- Anchor the player's rootpart so physics doesn't mess things up.
                    t:Play()
                    t.Completed:Connect(function()
                        Character.PrimaryPart.Anchored = false
                    end)

                    local teleportingValue = Character.currentlyTeleporting
                    teleportingValue.Value = true
                    wait(5)
                    teleportingValue.Value = false
                end
            end)
    end

    local thisTeleporter = Utils.getFirstDescendantByName(parent,
                                                          "QuestTeleporterModel")

    local labels = Utils.getDescendantsByName(thisTeleporter, "TeleporterLabel")
    for i, label in ipairs(labels) do label.Text = questTitle end

    local labels2 = Utils.getDescendantsByName(skyBoxTeleporter,
                                               "TeleporterLabel")
    for i, label in ipairs(labels2) do label.Text = questTitle end

    local teleporterSpacing = 10

    local dummyHomeTP = Utils.getFirstDescendantByName(workspace,
                                                       "SkyBoxTeleporter")
    skyBoxTeleporter.PrimaryPart.CFrame =
        dummyHomeTP.CFrame *
            CFrame.new(Vector3.new(-teleporterSpacing * (questIndex - 1), 0, 0)) *
            CFrame.Angles(0, math.rad(0), 0)

    skyBoxTeleporter.PrimaryPart.Anchored = true
    skyBoxTeleporter.Name = "teleporter" .. "-sky- " .. sceneIndex
    thisTeleporter.Name = "teleporter" .. "-local- " .. sceneIndex

    if (isStartScene or isEndScene) then
        if isStartScene then
            setLocalTPTargetToRemoteTP(skyBoxTeleporter, thisTeleporter)
            setLocalTPTargetToRemoteTP(thisTeleporter, skyBoxTeleporter)
        end
        if isEndScene then
            setLocalTPTargetToRemoteTP(skyBoxTeleporter, thisTeleporter)
            setLocalTPTargetToRemoteTP(thisTeleporter, skyBoxTeleporter)
        end

        thisTeleporter.PrimaryPart.Anchored = true
    else
        thisTeleporter:Destroy()
    end

end

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX94b644332d4e44c493e739559a0436de">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">DropBox</string>
					<string name="ScriptGuid">{c6be325b-647e-4f87-a530-a1fcefd832a1}</string>
					<ProtectedString name="Source"><![CDATA[
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX66f66ce0d37d410e956d0aa518b3396c">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">DropBox</string>
						<string name="ScriptGuid">{15913fed-4d0a-42b5-9748-e91c73e51502}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local Utils = require(Sss.Source.Utils.U001GeneralUtils)
local Constants = require(Sss.Source.Constants.Constants)

local module = {}

function module.configDropBox(props)

    local scene = props.scene
    local sceneIndex = props.sceneIndex

    local questIndex = props.questIndex
    local isEndScene = props.isEndScene

    local isStartScene = props.isStartScene
    local dropBox = props.dropBox
    local item = props.item

    if (isStartScene) then
        -- if (isEndScene) then

        local part = Utils.getFirstDescendantByName(scene,
                                                    "DropBoxDetectionRegion")

        local function onPartTouched(otherPart)
            local partParent = otherPart.Parent
            local match = partParent.Name == item.name

            if match then
                partParent.Parent = workspace
                -- 
            end

            local humanoid = partParent:FindFirstChildWhichIsA("Humanoid")
            if humanoid and false then
                -- 
            end
        end

        part.Touched:Connect(onPartTouched)

        local labels = Utils.getDescendantsByName(dropBox, "ItemLabel")
        for i, label in ipairs(labels) do label.Text = item.name end

        dropBox.Name = scene.Name .. "-local- " .. sceneIndex
    else
        dropBox:Destroy()
    end

end

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBXe11621ee743549de863ea2eabaca829d">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Items</string>
					<string name="ScriptGuid">{aa272c1b-1a60-4113-a0a3-63ce12cb153c}</string>
					<ProtectedString name="Source"><![CDATA[
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX401cb4c56345449198d1909a4dc5c274">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Items</string>
						<string name="ScriptGuid">{ebc28160-30f9-4b77-b417-b0ffc4b20d00}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local Utils = require(Sss.Source.Utils.U001GeneralUtils)

local module = {}

function module.addItems(props) end

return module
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX3f45e4a7bd3641639a4dec16a258d0da">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">TheaterSeat</string>
					<string name="ScriptGuid">{15440dbc-9d15-4cb3-b356-f831e73a3888}</string>
					<ProtectedString name="Source"><![CDATA[
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX0b976579c46b49ca902b5285b2a35255">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">TheaterSeat</string>
						<string name="ScriptGuid">{63311249-f5ca-4173-b480-abde6e2a3f62}</string>
						<ProtectedString name="Source"><![CDATA[local Sss = game:GetService("ServerScriptService")
local Utils = require(Sss.Source.Utils.U001GeneralUtils)
local Buttons = require(Sss.Source.Buttons.Buttons)
local Constants = require(Sss.Source.Constants.Constants)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local freezeCameraRE = ReplicatedStorage:WaitForChild("FreezeCameraRE")
local renderDialogRE = ReplicatedStorage:WaitForChild("RenderDialogRE")

local module = {}

function module.addSeat(props)
    local seat = props.seat
    local clonedScene = props.clonedScene
    local sceneConfig = props.sceneConfig
    local addCharactersToScene = props.addCharactersToScene
    local sceneFolder = props.sceneFolder
    -- local openBridgeDoor = props.openBridgeDoor

    local Players = game:GetService("Players")
    local currentPlayer = nil

    local numPages = #sceneConfig.frames

    function renderScreenDialog(props)
        local player = props.player
        local frameConfig = props.frameConfig

        renderDialogRE:FireClient(player, frameConfig.dialogs)
    end

    function openBridgeDoor(props)
        local clonedScene2 = props.clonedScene
        local bridgeDoorRight = Utils.getFirstDescendantByName(clonedScene2,
                                                               "BridgeDoorRight")
        local bridgeDoorLeft = Utils.getFirstDescendantByName(clonedScene2,
                                                              "BridgeDoorLeft")

        if bridgeDoorRight then bridgeDoorRight:Destroy() end
        if bridgeDoorLeft then bridgeDoorLeft:Destroy() end
    end

    seat:GetPropertyChangedSignal("Occupant"):Connect(
        function()
            local cameraPath1 = Utils.getFirstDescendantByName(clonedScene,
                                                               "ScreenCameraPath1")
            local cameraPath2 = Utils.getFirstDescendantByName(clonedScene,
                                                               "ScreenCameraPath2")

            local humanoid = seat.Occupant
            if humanoid then
                local pageNum = 1

                local character = humanoid.Parent
                local player = Players:GetPlayerFromCharacter(character)
                local frameConfig = sceneConfig.frames[pageNum]

                if player then
                    currentPlayer = player

                    renderScreenDialog({
                        frameConfig = frameConfig,
                        player = player
                    })

                    local props2 = {
                        clonedScene = clonedScene,
                        numPages = numPages,
                        sceneConfig = sceneConfig,
                        sceneFolder = sceneFolder,
                        player = player,
                        addCharactersToScene = addCharactersToScene,
                        renderScreenDialog = renderScreenDialog,
                        sgui = player.PlayerGui.SceneDialogGui,
                        openBridgeDoor = openBridgeDoor
                    }
                    Buttons.configButtons(props2)

                    freezeCameraRE:FireClient(player, cameraPath1, cameraPath2,
                                              true)
                    return
                end
            end

            if currentPlayer then
                currentPlayer.Character:WaitForChild("Humanoid").WalkSpeed =
                    Constants.walkSpeed
                freezeCameraRE:FireClient(currentPlayer, cameraPath1,
                                          cameraPath2, false)
                currentPlayer = nil
            end
        end)

end

return module

]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Script" referent="RBXf3f6af24ae8e4a3c882de8fbb82176aa">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">BindFreezeCamera1</string>
				<string name="ScriptGuid">{afe0d0c8-c6cb-4e5a-98c7-920b22808587}</string>
				<ProtectedString name="Source"><![CDATA[print("--------------------------------BindFreezeCameraRE")

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local remoteEvent = ReplicatedStorage:WaitForChild("FreezeCameraRE")

]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
	</Item>
	<Item class="ServerStorage" referent="RBX83b078fdc9c44d22ae0004e5583c750d">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ServerStorage</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="ModuleScript" referent="RBX3ce0a056e3564bcabf404a775db342df">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Source</string>
				<string name="ScriptGuid">{a3a1129b-d3d0-4e12-89ea-3c05d795cc5a}</string>
				<ProtectedString name="Source"><![CDATA[---test
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXc5d08ebeb7cc4491bc49619aef32140b">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">-- Demos</string>
					<string name="ScriptGuid">{a1dfbdce-4ce7-482f-9366-3163ce7b52b3}</string>
					<ProtectedString name="Source"></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBXef650a33627345e3ac97371b505c7af4">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">bs</string>
						<string name="ScriptGuid">{172fa98e-e7a8-468c-b32f-7b42d39a9967}</string>
						<ProtectedString name="Source">--- test</ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Folder" referent="RBXe7518efc749344309762f6b3daded4ce">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">TagList</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="Folder" referent="RBX481b5ae4902b467291dfc2b985acc0dd">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">BridgeRightModel</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="Color3Value" referent="RBX362df01877c64dee9792b2f59423f3f8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">Color</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Color3 name="Value">
							<R>0.464705884</R>
							<G>0.177491188</G>
							<B>0.135553464</B>
						</Color3>
					</Properties>
				</Item>
				<Item class="BoolValue" referent="RBX97020596659847e8b744d4c7caed5b9e">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">Visible</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<bool name="Value">false</bool>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX04e985e291924e4f9d103af06c87bd59">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">Group</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Value">Bridges</string>
					</Properties>
				</Item>
				<Item class="BoolValue" referent="RBXc91cf9666aad44edb31a095c2b1cb019">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">AlwaysOnTop</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<bool name="Value">true</bool>
					</Properties>
				</Item>
			</Item>
			<Item class="Folder" referent="RBX82e1b1e7de4e4c488df796edd5afe0ce">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">Transparent</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="Color3Value" referent="RBX6133ed06f0914d49937c61b3795d8367">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">Color</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Color3 name="Value">
							<R>0.755686283</R>
							<G>0.167957306</G>
							<B>0.589001954</B>
						</Color3>
					</Properties>
				</Item>
				<Item class="BoolValue" referent="RBXc6f7546927b64412817db501b916f059">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">Visible</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<bool name="Value">false</bool>
					</Properties>
				</Item>
			</Item>
			<Item class="Folder" referent="RBXc9449825c9624b79a6f10940a45f4511">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">BaseWallTransparent</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="Color3Value" referent="RBX8d84846064e94e2dab33c9399801d1f6">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">Color</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Color3 name="Value">
							<R>0.242404103</R>
							<G>0.881960809</G>
							<B>0.339444399</B>
						</Color3>
					</Properties>
				</Item>
				<Item class="BoolValue" referent="RBX0be413a3e8314e23aeefe15953e49b7b">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">Visible</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<bool name="Value">true</bool>
					</Properties>
				</Item>
			</Item>
			<Item class="Folder" referent="RBX3786e1676932429c84b5ba0d757aff9d">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">SkyBoxWalls</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="Color3Value" referent="RBXf761639858ec4c8bba84e7b2b90a9a10">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">Color</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Color3 name="Value">
							<R>0.19108054</R>
							<G>0.835294127</G>
							<B>0.136330277</B>
						</Color3>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Folder" referent="RBX90e1ee6da16741608276cba9f57897da">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">TagGroupList</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="Folder" referent="RBX23c60a724fc94814bb4a776a98885e1c">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">Bridges</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
	</Item>
	<Item class="ReplicatedStorage" referent="1">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ReplicatedStorage</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="ModuleScript" referent="2">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Source</string>
				<string name="ScriptGuid">{0b2f548e-44f3-415f-9d29-2ab8518148d9}</string>
				<ProtectedString name="Source"><![CDATA[---test
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXf9154532993043c0ba88a819110c5b68">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Texts</string>
					<string name="ScriptGuid">{0a38b8ab-4626-484a-94d5-da7b22c9d5ff}</string>
					<ProtectedString name="Source">---test</ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="RemoteEvent" referent="RBX7e07d2f9935645a293cecc3bf5307a44">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">buttonEvent</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="RemoteEvent" referent="RBXd8a27200040e4ea4aa5592423b03a386">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">FreezeCameraRE</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="RemoteEvent" referent="RBX574ad48e6ebe43a7ad1733ca8d520d3f">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">RenderDialogRE</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
	</Item>
	<Item class="LuaWebService" referent="RBX913b5a695e2c4b6b8e664bb28f4d43b6">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="Lighting" referent="RBXfc46a89802484b8a958c0f7a777f66eb">
		<Properties>
			<Color3 name="Ambient">
				<R>0.5</R>
				<G>0.5</G>
				<B>0.5</B>
			</Color3>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<float name="Brightness">1</float>
			<Color3 name="ColorShift_Bottom">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<Color3 name="ColorShift_Top">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<float name="EnvironmentDiffuseScale">0</float>
			<float name="EnvironmentSpecularScale">0</float>
			<float name="ExposureCompensation">0</float>
			<Color3 name="FogColor">
				<R>0.75</R>
				<G>0.75</G>
				<B>0.75</B>
			</Color3>
			<float name="FogEnd">100000</float>
			<float name="FogStart">0</float>
			<float name="GeographicLatitude">41.7332993</float>
			<bool name="GlobalShadows">false</bool>
			<string name="Name">Lighting</string>
			<Color3 name="OutdoorAmbient">
				<R>0.5</R>
				<G>0.5</G>
				<B>0.5</B>
			</Color3>
			<bool name="Outlines">true</bool>
			<float name="ShadowSoftness">0.5</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<token name="Technology">2</token>
			<string name="TimeOfDay">14:00:00</string>
		</Properties>
	</Item>
	<Item class="HttpService" referent="0">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="HttpEnabled">true</bool>
			<string name="Name">HttpService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="TestService" referent="RBXdbceb08d62aa44e8970dd70019785426">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="AutoRuns">true</bool>
			<string name="Description"></string>
			<bool name="ExecuteWithStudioRun">false</bool>
			<bool name="Is30FpsThrottleEnabled">true</bool>
			<bool name="IsPhysicsEnvironmentalThrottled">true</bool>
			<bool name="IsSleepAllowed">true</bool>
			<string name="Name">TestService</string>
			<int name="NumberOfPlayers">0</int>
			<double name="SimulateSecondsLag">0</double>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<double name="Timeout">10</double>
		</Properties>
	</Item>
	<Item class="LanguageService" referent="RBX7f0fdf31894d47889a695b20a12c6e2d">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">LanguageService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<SharedStrings>
		<SharedString md5="yuZpQdnvvUBOTYh1jqZ2cA=="></SharedString>
	</SharedStrings>
</roblox>